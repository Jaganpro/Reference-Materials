True or False?

Multilingual organizations can translate error messages using the Translation Workshop.

(#PLATFORM)`|`False.

Multilingual organizations can translate error messages using the Translation Workbench, not "Workshop".

If you have a multilingual organization, be sure to translate your error messages.
~|~
True or False?

Salesforce translates the standard and custom error messages for required lookup filters.

(#PLATFORM)`|`False.

Salesforce translates the standard error message for required lookup filters, but not custom error messages. 

Use the Translation Workbench to translate lookup filter custom error messages. 

To restore a standard error message after modifying it, click "Reset to default message".
~|~
How are Apex triggers stored?

(Select all that apply)

A. As static resources.
B. As metadata in the application, under the object with which they are associated.
C. As .trigger files in the /code directory of your organization's public files.
D. As compiled bytecode in the Salesforce platform Apex app server.
E. As resource files in the Developer Console.
F. None of these

(#APEX)`|`B. As metadata in the application, under the object with which they are associated.

Apex triggers are stored as metadata in the application under the object with which they are associated.
~|~
True or False?

HTML used in custom field validation error messages will be rendered by the Salesforce UI if the error message is displayed.

(#PLATFORM)`|`False.

For Apex saved using Salesforce.com API version 27.0 and later, the specified error message is escaped in the Salesforce user interface. 

If the error message contains HTML markup, the escaped markup displays as text and isn't rendered in the user interface.
~|~
Apex is...
(select all that apply)

A: Strongly Typed.
B: Object Oriented.
C: Uses Java-like syntax.
D: Acts like database stored procedures.

(#APEX)`|`A: Strongly Typed.
B: Object Oriented.
C: Uses Java-like syntax.
D: Acts like database stored procedures.
~|~
Apex code can be initiated in what ways?
(select all that apply)

A: Web service requests.
B: Triggers on objects.
C: More?? Is "Button Clicks" a valid choice?

(#APEX)`|`A: Web service requests.
B: Triggers on objects.
C: More?? Is "Button Clicks" a valid choice?
~|~
Apex is available in which Salesforce Editions?
(select all that apply)

A. Professional Edition
B. Unlimited Edition
C. Enterprise Edition
D. Developer Edition
E. Database.com
F. None of these`|`A. Professional Edition
B. Unlimited Edition
C. Enterprise Edition
D. Developer Edition
E. Database.com
~|~
What are some best practices when setting up test data?

(Select all that apply)

A. 
B. Create the necessary data in test classes, so the tests do not have to rely on data in a particular organization.
C. 
D. Create all test data before calling the StartTest() method.
E. 
F. None of these

(#APEX)
(#TESTS)`|`B. Create the necessary data in test classes, so the tests do not have to rely on data in a particular organization.

D. Create all test data before calling the StartTest() method.

Since tests don't commit, you won't need to delete any data.
~|~
The system method, ___________, lets you write test methods that change user contexts to either an existing user or a new user.

A. System.testAs()
B. System.testAsUser
C. System.runAsUser()
D. System.impersonateUser()
E. System.runAs()
F. None of these

(#APEX)
(#TESTS)`|`E. System.runAs()

Generally, all Apex code runs in system mode, and the permissions and record sharing of the current user are not taken into account. 

The system method, System.runAs(), lets you write test methods that change user contexts to either an existing user or a new user.
~|~
True or False?

System.runAs() does not validate CRUD or Field Level Security permissions.

(#APEX)
(#TESTS)`|`True.

The System.runAs() functionality can be used to test and verify proper data sharing and data access. 

However, System.runAs() does NOT validate CRUD or Field Level Security permissions.
~|~
True or False?

Complex data types in Apex (eg. Objects, sObjects, and Lists) are initialized to NULL, while Primitive types (eg. Integer, Boolean, and Decimal) are initialized to zero.

(#APEX)`|`False.

All Apex variables are initialized to NULL. This includes static variables and function parameters.
~|~
True or False?

In Apex, Boolean variables which are NULL evaluate to FALSE.

(#APEX)`|`False. 

You'll get a null reference exeception.

Always compare booleans to TRUE, instead of false. A null will not evaluate to true, even thought it also won't be equal to FALSE.
~|~
True or False?

When using multiple catch() statements in a try-catch block, the general exception type, 'Exception', can only be used by the last catch() statement.

(#APEX)`|`True.

A developer can use optional catch statements for any exception type in a try-catch block. However, the general exception type, 'Exception', must only be used by the last catch() block.

EXAMPLE:

try{
 // Some risky code.
}
catch(SomeExceptionType e){
 // Handle one exception type.
}
catch(SomeOtherExceptionType e){
 // Handle another exception type.
}
catch(Exception e){
 // This must be the last catch block.
}
~|~
Good Apex tests should....

(Select all that apply)

A. Make calls to methods using both valid and invalid inputs.
B. In the case of conditional logic (including ternary operators), execute each branch of code logic.
C. Only test code using the System Administrator profile.
D. Focus solely on test coverage percentage score.
E. Complete successfully without throwing any exceptions, unless those errors are expected and caught in a try...catch block.
F. None of these

(#APEX)`|`Good Apex tests should:

A. Make calls to methods using both valid and invalid inputs.

B. In the case of conditional logic (including ternary operators), execute each branch of code logic.

E. Complete successfully without throwing any exceptions, unless those errors are expected and caught in a try...catch block.
~|~
Good Apex tests should....

(Select all that apply)

A. Exercise bulk trigger functionality—use at least 20 records in your tests.
B. Only test code using the Standard User profile.
C. Access live organization data to validate SOQL queries and DML operations.
D. Use the isTest annotation. Classes defined with the isTest annotation do not count against your organization limit of 3 MB for all Apex code. See IsTest Annotation.
E. Use the runAs method to test your application in different user contexts.
F. None of these

(#VISUALFORCE)
(#APEX)
(#PLATFORM)`|`Good Apex tests should:

A. Exercise bulk trigger functionality—use at least 20 records in your tests.

D. Use the isTest annotation. Classes defined with the isTest annotation do not count against your organization limit of 3 MB for all Apex code. See IsTest Annotation.

E. Use the runAs method to test your application in different user contexts.
~|~
Good Apex tests should....

(Select all that apply)

A. Use the ORDER BY keywords to ensure that the records are returned in the expected order.
B. Write comments stating not only what is supposed to be tested, but the assumptions the tester made about the data, the expected outcome, and so on.
C. Avoid using System.Assert methods to reduce problems when deploying to a production org.
D. Focus on single-object design patterns to keep test classes clean, lightweight, and fast.
E. Test the classes in your application individually. Never test your entire application in a single test.
F. None of these

(#APEX)`|`Good Apex tests should:

A. Use the ORDER BY keywords to ensure that the records are returned in the expected order.

B. Write comments stating not only what is supposed to be tested, but the assumptions the tester made about the data, the expected outcome, and so on.

E. Test the classes in your application individually. Never test your entire application in a single test.
~|~
Good Apex tests should....

(select all that apply)

A. Use test methods that are defined inside of the Apex class that they are testing.
B. Always handle all exceptions that are caught, instead of merely catching the exceptions.
C. Avoid using System.Debug(), and focus only on System.Assert methods to alert developers of problems.
D. Use System.assert methods to prove that code behaves properly.
E. Have names that always start with "TEST_CLASS_", and end with "__c".
F. None of these

(#APEX)`|`Good Apex tests should:

B. Always handle all exceptions that are caught, instead of merely catching the exceptions.

D. Use System.assert methods to prove that code behaves properly.
~|~
True or False?

When deploying to a production organization, 75% of the unit tests in your organization namespace are executed.

(#APEX)
(#TESTS)`|`False.

When deploying to a production organization, EVERY unit test in your organization namespace is executed.

In order to deploy, your unit tests must provide 75% code coverage for all the Apex classes in your organization.
~|~
True or False?

Calls to System.debug are not counted as part of Apex code coverage.

(#APEX)
(#TESTS)`|`True.

Calls to System.debug are not counted as part of Apex code coverage.
~|~
True or False?

Test methods and test classes are counted as part of Apex code coverage, and must be covered.

(#APEX)
(#TESTS)`|`False.

Test methods and test classes are not counted as part of Apex code coverage, and do not need to be covered.
~|~
True or False?

Every trigger must have some test coverage.

(#APEX)
(#TESTS)`|`True.

Every trigger must have some test coverage.
~|~
Although Trigger.new is a collection of records, when used as a bind variable in a SOQL query, Apex automatically....

(Select all that apply)

A. Passes the collection to the query, as long as the calling class implements the Trigger.QueryBind class.
B. Transforms the list of records into a list of corresponding Ids.
C. Truncates the collection so that only the Id and Name fields.
D. Throws a DMLException with the ILLEGAL_QUERY status.
E. Transforms the SOQL to an in-place SOSL query and returns the FIND results.
F. None of these

(#APEX)`|`B. Transforms the list of records into a list of corresponding Ids.

Although Trigger.new is a collection of records, when used as a bind variable in a SOQL query, Apex automatically transforms the list of records into a list of corresponding Ids.

 Contact[] cons = [SELECT LastName FROM Contact
 WHERE AccountId IN :Trigger.new];
~|~
A ___________________ is a set of instructions that specify what happens when a user interacts with the components specified in associated Visualforce markup, such as when a user clicks a button or link.

(#APEX)
(#VISUALFORCE)`|`Visualforce controller

A Visualforce controller is a set of instructions that specify what happens when a user interacts with the components specified in associated Visualforce markup, such as when a user clicks a button or link.

Controllers also provide access to the data that should be displayed in a page, and can modify component behavior.
~|~
True or False?

A cascade-delete operation respects the security and sharing settings of all objects and records being deleted.

(#PLATFORM)`|`False.

When creating lookup relationships, selecting the "Delete this record also" option can result in a cascade-delete when the target lookup record is deleted.

A cascade-delete bypasses security and sharing settings, which means users can delete records when the target lookup record is deleted even if they don't have access to the records.

To prevent records from being accidentally deleted, cascade-delete is disabled by default. Contact Salesforce.com to get the cascade-delete option enabled for your organization.
~|~
____________ is a placeholder for content that is rendered in a specific part of the parent component, such as the header or footer of an <apex:dataTable>.


(Select all that apply)

A. <apex:labelSet>
B. <apex:customName>
C. <c:facet>
D. <apex:facet>
E. <c:labelSet>
F. None of these

(#VISUALFORCE)`|`D. <apex:facet>

Defines a placeholder for content that is rendered in a specific part of the parent component, such as the header or footer of an <apex:dataTable>.

An <apex:facet> component can only exist in the body of a parent component if the parent supports facets. 

The name of the facet component must match one of the pre-defined facet names on the parent component. This name determines where the content of the facet component is rendered. 

Consequently, the order in which a facet component is defined within the body of a parent component does not affect the appearance of the parent component.
~|~
Standard List Controller Actions.

save

(select all that apply)

A. 
B. Inserts new records or updates existing records that have been changed.
C. 
D. 
E. Returns the user to the original page (if known), or the home page, after execution.
F. None of these

(#APEX)
(#VISUALFORCE)`|`B. Inserts new records or updates existing records that have been changed.
E. Returns the user to the original page (if known), or the home page, after execution.
~|~
Standard List Controller Actions.

quicksave

(select all that apply)

A. Inserts new records or updates existing records that have been changed.
B. 
C. Does not redirect the user to another page.
D. 
E. 
F. None of these

(#APEX)
(#VISUALFORCE)`|`A. Inserts new records or updates existing records that have been changed.
C. Does not redirect the user to another page.
~|~
Standard List Controller Actions.

list

(select all that apply)

A. 
B. 
C. Returns a PageReference object of the standard list page.
D. Bases the return value on the most recently used list filter when the filterID is not specified by the user.
E. 
F. None of these

(#APEX)
(#VISUALFORCE)`|`C. Returns a PageReference object of the standard list page.
D. Bases the return value on the most recently used list filter when the filterID is not specified by the user.

#EXPLAIN#
~|~
Standard List Controller Actions.

cancel

(select all that apply)

A. 
B. Returns the user to the page where the user originally invoked an edit operation.
C. 
D. 
E. Aborts an edit operation.
F. None of these

(#VISUALFORCE)`|`B. Returns the user to the page where the user originally invoked an edit operation.
E. Aborts an edit operation.

#EXPLAIN#
~|~
Standard List Controller Actions.

first

(select all that apply)

A. 
B. Displays the first page of records in the set.
C. 
D. 
E. 
F. None of these

(#VISUALFORCE)`|`B. Displays the first page of records in the set.

#EXPLAIN#
~|~
Standard List Controller Actions.

last

(select all that apply)

A. 
B. 
C. 
D. 
E. Displays the last page of records in the set.
F. None of these

(#VISUALFORCE)`|`E. Displays the last page of records in the set.
~|~
Standard List Controller Actions.

next

(select all that apply)

A. 
B. 
C. Displays the next page of records in the set.
D. 
E. 
F. None of these

(#VISUALFORCE)`|`C. Displays the next page of records in the set.
~|~
Standard List Controller Actions.

previous

(select all that apply)

A. Displays the previous page of records in the set.
B. 
C. 
D. 
E. 
F. None of these

(#VISUALFORCE)`|`A. Displays the previous page of records in the set.
~|~
What is the difference between <apex:selectOption> and <apex:selectOptions>?`|`What is the difference between <apex:selectOption> and <apex:selectOptions>?
~|~
True or False?

In a custom controller or controller extension, you can refer to or instantiate a PageReference object in the following way: Page.existingPageName

(#VISUALFORCE)
(#APEX)`|`True.

In a custom controller or controller extension, you can refer to or instantiate a PageReference in one of the following ways:

Page.existingPageName

Refers to a PageReference for a Visualforce page that has already been saved in your organization. 

By referring to a page in this way, the platform recognizes that this controller or controller extension is dependent on the existence of the specified page and will prevent the page from being deleted while the controller or extension exists.
~|~
True or False?

<apex:commandButton> components can be placed anywhere on a Visualforce page as long as they are children of the <apex:page> tag.


(#VISUALFORCE)`|`False.

It is true that <apex:commandButton> components must be children of the <apex:page> tag.

However, <apex:commandButton> components must ALSO be placed between <apex:form></apex:form> tags.
~|~
True or False?

Splitting up application development tools based on whether they affect the data model, business logic, or user interface is also known as the Model-View-Controller (MVC) application development pattern.

(#PLATFORM)`|`True.

In Salesforce:

- The Model is the data model (Standard and Custom objects)

- The View is the user interface (Visualforce Pages and Components)

- The Controller is the business logic (Apex code)
~|~
True or False?

S-controls, the tool that allows application developers to display custom HTML in a detail page or custom tab, provide more flexibility than page layouts, and are the preferred way to create custom user interface elements in Salesforce. 

(#PLATFORM)`|`False.

S-controls have been superseded by Visualforce pages. After March 2010 organizations that have never created s-controls, as well as new organizations, won't be allowed to create them. Existing s-controls will remain unaffected, and can still be edited.
~|~
A Visualforce page consists of which primary elements?

(Select all that apply)

A. An Apex class
B. A Visualforce controller
C. A trigger.
D. S-Controls
E. Visualforce Markup
F. None of the above

(#VISUALFORCE)`|`B. A Visualforce controller
E. Visualforce Markup

Developers can use Visualforce to create a Visualforce page definition. A page definition consists of two primary elements:

• Visualforce markup
• A Visualforce controller
~|~
Visualforce markup consists of...

(Select all that apply)

A. Any Web-enabled code
B. Visualforce Tags
C. Apex code
D. HTML
E. JavaScript
F. C# Remoting Modules
G. None of the above

(#VISUALFORCE)`|`A. Any Web-enabled code
B. Visualforce Tags
D. HTML
E. JavaScript

Visualforce markup consists of Visualforce tags, HTML, JavaScript, or any other Web-enabled code embedded within a single
<apex:page> tag. 

The markup defines the user interface components that should be included on the page, and the way they
should appear.
~|~
True or False?

Visualforce markup defines the user interface components that should be included on the page, and the way they
should appear.

(#VISUALFORCE)`|`True.

Visualforce markup consists of Visualforce tags, HTML, JavaScript, or any other Web-enabled code embedded within a single
<apex:page> tag. 

The markup defines the user interface components that should be included on the page, and the way they
should appear.
~|~
What provides access to data that should be displayed in a Visualforce page, and can modify Visualforce component behavior?

(Select all that apply)

A. Validation rules
B. Apex controller
C. MVC controller class
D. Visualforce controller
E. Force.com IDE
F. None of the above

(#VISUALFORCE)`|`D. Visualforce controller

A Visualforce controller is a set of instructions that specify what happens when a user interacts with the components specified
in associated Visualforce markup, such as when a user clicks a button or link. 

Controllers also provide access to the data that should be displayed in a page, and can modify component behavior.
~|~
True or False?

A developer can use the standard controllers provided by the Force.com platform and custom controller logic simultaneously by passing the name of their custom controller class to the "controller" attribute of the <apex:page> tag.

(#VISUALFORCE)`|`False.

Standard and custom controllers can not be used simultaneously.

A developer can either use a standard controller provided by the Force.com platform, or add custom controller logic with a
class written in Apex. 

To leverage functionality of Standard Controllers, while simultaneously adding custom logic, you must write a custom class that extends the standard controller. You notify the Visualforce page of your customizations via the "extensions" attribute of the <apex:page> tag.
~|~
True or False?

A standard controller consists of the same functionality and logic that is used by the Salesforce pages used by standard objects, like Accounts and Contacts. 

A custom controller provides the same functionality for user-defined, Custom objects.

(#VISUALFORCE)`|`False.

A standard controller consists of the same functionality and logic that is used for a standard Salesforce page, regardless of whether the object is a Standard Salesforce object or a Custom object.

For example, if you use the standard Accounts controller, clicking a Save button in a Visualforce page results in the same behavior as clicking Save on a standard Account edit page. The same behavior holds true for Custom objects.
~|~
True or False?

If you use a standard controller on a page and the user doesn't have access to the object, the page will display a insufficient
privileges error message.

(#VISUALFORCE)`|`True.

If you use a standard controller on a page and the user doesn't have access to the object, the page will display a insufficient privileges error message.

You can avoid this by checking the user's accessibility for an object and displaying components appropriately.
~|~
__________ enables you to create Visualforce pages that can display or act on a set of records. 

A. A Standard Controller
B. A Standard List Controller
C. An Apex Recordset
D. A Custom List Doctype
E. An Apex class
F. None of the above

(#VISUALFORCE)`|`B. A Standard List Controller

A standard list controller enables you to create Visualforce pages that can display or act on a set of records. 

Examples of existing Salesforce pages that work with a set of records include list pages, related lists, and mass action pages.
~|~
A ____________ is a class written in Apex that implements all of a page's logic, without leveraging a standard controller.

A. Controller Extension
B. Validation Extension
C. Visualforce Component
D. Visualforce Plugin
E. Custom Controller
F. None of the above

(#VISUALFORCE)`|`E. Custom Controller

A custom controller is a class written in Apex that implements all of a page's logic, without leveraging a standard controller.

If you use a custom controller, you can define new navigation elements or behaviors, but you must also reimplement any functionality that was already provided in a standard controller.

Like other Apex classes, custom controllers execute entirely in system mode, in which the object and field-level permissions of the current user are ignored. You can specify whether a user can execute methods in a custom controller based on the user's profile.
~|~
Like other Apex classes, custom controllers execute entirely in ____________, in which the object and field-level permissions of the current user are ignored.

A. User Mode
B. System Mode
C. OWD Mode
D. With-Sharing Mode
E. Anonymous Mode
F. None of the above

(#VISUALFORCE)`|`B. System Mode

Like other Apex classes, custom controllers execute entirely in system mode, in which the object and field-level permissions of the current user are ignored.

You can specify whether a user can execute methods in a custom controller based on the user's profile.
~|~
If you use a standard controller on a page and the user doesn't have access to the object, the page will...

(Select all that apply)

A. Throw an ACCESS_VIOLATION exception.
B. Write an ACCESS_VIOLATION message to the debug log.
C. Display an insufficient privileges error message.
D. Redirect the user to their home page.
E. Ask the user if they would like to upgrade permissions in order to view the object.
F. None of the above

(#VISUALFORCE)`|`C. Display an insufficient privileges error message.

If you use a standard controller on a page and the user doesn't have access to the object, the page will display a insufficient privileges error message. You can avoid this by checking the user's accessibility for an object and displaying components appropriately.

A standard controller consists of the same functionality and logic that is used for a standard Salesforce page. For example, if you use the standard Accounts controller, clicking a Save button in a Visualforce page results in the same behavior as clicking Save on a standard Account edit page.
~|~
By using the ____________ keyword in a class definition, a developer can create a custom controller or controller extension that respects OWD, role hierarchy, and sharing rules.

(Select all that apply)

A. with permissions
B. with defaults
C. with security
D. with sharing
E. with roles
F. None of these

(#VISUALFORCE)
(#APEX)`|`D. with sharing

Although custom controllers and controller extension classes execute in system mode and thereby ignore user permissions and field-level security, you can choose whether they respect a user's organization-wide defaults, role hierarchy, and sharing rules by using the "with sharing" keywords in the class definition.
~|~
A/an _____________ is a class written in Apex that adds to or overrides behavior in a standard or custom controller.

(Select all that apply)

A. Custom component
B. Controller extension
C. Apex extension
D. Extended Controller
E. Component extension
F. None of these

(#VISUALFORCE)
(#APEX)`|`B. Controller extension

A controller extension is a class written in Apex that adds to or overrides behavior in a standard or custom controller.

Extensions allow you to leverage the functionality of another controller while adding your own custom logic. Because standard controllers execute in user mode, in which the permissions, field-level security, and sharing rules of the current user are enforced, extending a standard controller allows you to build a Visualforce page that respects user permissions.

Although the extension class executes in system mode, the standard controller executes in user mode. As with custom controllers, you can specify whether a user can execute methods in a controller extension based on the user's profile.
~|~
Developers can use Visualforce pages to:

(Select all that apply)

A. Override standard buttons
B. Override tab overview pages
C. Define custom tabs
D. Embed components in detail page layouts
E. Create dashboard components or custom help pages
F. Create custom Console components.
G. None of these

(#VISUALFORCE)`|`A. Override standard buttons
B. Override tab overview pages
C. Define custom tabs
D. Embed components in detail page layouts
E. Create dashboard components or custom help pages
F. Create custom Console components.

Developers can use Visualforce pages to:

• Override standard buttons, such as the New button for accounts, or the Save button for contacts
• Override tab overview pages, such as the Accounts tab home page
• Define custom tabs
• Embed components in detail page layouts
• Create dashboard components or custom help pages
• Customize, extend, or integrate the sidebars in the Service Cloud console (custom console components)
~|~
Which permissions are required to set Visualforce page security?

(Select all that apply)

A. 
B. Customize Application
C. 
D. 
E. Manage Users
F. None of these

(#PLATFORM)`|`B. Customize Application
E. Manage Users

Required permissions for various Visualforce development tasks:

◊ To enable Visualforce development mode: "Customize Application"

◊ To create, edit, or delete Visualforce pages: "Customize Application"

◊ To create and edit custom Visualforce components: "Customize Application"

◊ To edit custom Visualforce controllers or Apex "Author Apex"

◊ To set Visualforce page security: "Customize Application" AND "Manage Users"

◊ To set version settings for Visualforce pages: "Customize Application"

◊ To create, edit, or delete static resources: "Customize Application"

◊ To create Visualforce Tabs: "Customize Application"
~|~
The Benefits of Visualforce

• User-friendly development

• Integration with other Web-based user interface technologies

• Model-View-Controller (MVC) style development

• Concise syntax

• Data-driven defaults

• Hosted platform

• Automatically upgradeable`|`The Benefits of Visualforce

• User-friendly development

• Integration with other Web-based user interface technologies

• Model-View-Controller (MVC) style development

• Concise syntax

• Data-driven defaults

• Hosted platform

• Automatically upgradeable
~|~
When to use Visualforce

• Build wizards and other multistep processes.

• Create your own custom flow control through an application.

• Define navigation patterns and data-specific rules for optimal, efficient application interaction.`|`When to use Visualforce

• Build wizards and other multistep processes.

• Create your own custom flow control through an application.

• Define navigation patterns and data-specific rules for optimal, efficient application interaction.
~|~
When to use Apex

• Create Web services.

• Create email services.

• Perform complex validation over multiple objects.

• Create complex business processes that are not supported by workflow.

• Create custom transactional logic (logic that occurs over the entire transaction, not just with a single record or object.)

• Attach custom logic to another operation, such as saving a record, so that it occurs whenever the operation is executed, regardless of whether it originates in the user interface, a Visualforce page, or from SOAP API.`|`When to use Apex

• Create Web services.

• Create email services.

• Perform complex validation over multiple objects.

• Create complex business processes that are not supported by workflow.

• Create custom transactional logic (logic that occurs over the entire transaction, not just with a single record or object.)

• Attach custom logic to another operation, such as saving a record, so that it occurs whenever the operation is executed, regardless of whether it originates in the user interface, a Visualforce page, or from SOAP API.
~|~
Under what circumstances is it appropriate for a developer to add functionality to their application via the SOAP API?

(Select all that apply)

A. When consumers of the desired functionality have no experience with Force.com development.
B. When the desired functionality processes only one type of record at a time.
C. When the organization chooses not to share its Enterprise WSDL.
D. When the desired functionality does not require any transactional control.
E. None of these

(#APEX)
(#PLATFORM)`|`B. When the desired functionality processes only one type of record at a time.
D. When the desired functionality does not require any transactional control.

Use standard SOAP API calls if you want to add functionality to a composite application that processes only one type of record at a time and does not require any transactional control (such as setting a Savepoint or rolling back changes).
~|~
To aid ___________, each Visualforce page and custom component is saved with version settings for the specified version of the API as well as the specific version of Visualforce. 

A. bytecode compiles
B. Apex testing
C. portal development
D. backwards-compatibility
E. exception handling
F. None of these

(#VISUALFORCE)`|`D. backwards-compatibility

To aid backwards-compatibility, each Visualforce page and custom component is saved with version settings for the specified version of the API as well as the specific version of Visualforce. 

If the Visualforce page or component references installed managed packages, the version settings for each managed package referenced by the page or component is saved too.
~|~
True or False?

Custom components that are referenced in Visualforce pages always perform under their own version number.

(#VISUALFORCE)
(#PLATFORM)`|`True.

Custom components that are referenced in Visualforce pages always perform under their own version number. 

Thus, if a custom component is set at version 15.0, it always exhibits behavior from Visualforce version 15.0, whether running in a version 15.0 or a 16.0 page.
~|~
True or False?

You can only access custom Visualforce component version settings if you edit the component using Developer Mode.

(#VISUALFORCE)
(#PLATFORM)`|`False.

You can't access version settings if you edit using Developer Mode.

You can only access the version settings for a page or custom component if you edit it from Your Name > Setup > Develop.
~|~
One of the best ways to build Visualforce pages and code is by enabling ___________.

A. Visualforce development mode
B. Apex development mode
C. Force.com IDE access
D. Show viewstate
E. Visualforce system mode
F. None of these

(#VISUALFORCE)
(#PLATFORM)`|`A. Visualforce development mode

The best way to build Visualforce is by enabling Visualforce development mode. 

Visualforce development mode is only available for users with the "Customize Application" permission. 

Development mode provides you with:

◊ A special development footer on every Visualforce page that includes the page's view state, any associated controller, a link to the component reference documentation, and a page markup editor that offers highlighting, find-replace functionality, and auto-suggest for component tag and attribute names.

◊ The ability to define new Visualforce pages just by entering a unique URL.

◊ Error messages that include more detailed stack traces than what standard users receive.
~|~
True or False?

Visualforce development mode provides you with error messages that include more detailed stack traces than what standard users receive.

(#VISUALFORCE)
(#PLATFORM)`|`True.

The best way to build Visualforce is by enabling Visualforce development mode. 

Visualforce development mode is only available for users with the "Customize Application" permission. 

Development mode provides you with:

◊ A special development footer on every Visualforce page that includes the page's view state, any associated controller, a link to the component reference documentation, and a page markup editor that offers highlighting, find-replace functionality, and auto-suggest for component tag and attribute names.

◊ The ability to define new Visualforce pages just by entering a unique URL.

◊ Error messages that include more detailed stack traces than what standard users receive.
~|~
The __________ of a Visualforce page is composed of all the data that's necessary to maintain the state of the controller during server requests (like sending or receiving data).

A. Page Memory
B. State Settings
C. Cookie Collection
D. View State 
E. Page Header
F. None of these

(#VISUALFORCE)
(#APEX)`|`D. View State 

The view state of a web page is composed of all the data that's necessary to maintain the state of the controller during server requests (like sending or receiving data).

Since the view state contributes to the overall size of your page, performance of a page can depend on efficiently managing the view state. 

The View State tab in the development mode footer provides information about the view state of your Visualforce page as it interacts with Salesforce.
~|~
True or False?

The View State tab always appears in the Visualforce "development mode" editor, as long as the "Enable View State" setting is checked in the user's personal settings.

(#VISUALFORCE)
(#APEX)
(#PLATFORM)`|`False.

It is true that without selecting the view state tab would not appear if "Enable View State" setting in the user's personal settings.

However, even with view state enabled, because the view state is linked to form data, the View State tab ONLY appears if your page contains an <apex:form> tag.

In addition, the View State tab displays only on pages using custom controllers or controller extensions.
~|~
True or False?

Visualforce pages and components created using Salesforce API version 19.0 or higher must be written as well-formed XML.

(#VISUALFORCE)`|`True.

Visualforce pages and components created using Salesforce API version 19.0 or higher must be written as well-formed XML.

In general, this means that elements must be correctly nested, non-empty elements must have an end tag, empty elements must be terminated with a closing slash ("/"), and so on.

The following exceptions are allowed:

◊ Code that violates well-formed XML is permitted inside JavaScript. For example, you don't need to use <![CDATA[]]> tags in Visualforce.

◊ Code that violates well-formed XML is permitted inside expressions. For example, you don't need to escape quotation marks inside formulas.

◊ XML directives that are normally required at the beginning of a page—such as <?xml version="1.0" encoding="UTF-8"?>—can occur inside top-level container tags, like <apex:page> and <apex:component>.
~|~
True or False?

Visualforce pages use the same expression language as formulas. 

(#VISUALFORCE)`|`True.

Visualforce pages use the same expression language as formulas. 

That is, anything inside {! } is evaluated as an expression that can access values from records that are currently in context. 

For example, you can display the current user's first name by adding the {!$User.FirstName} expression to a page:
~|~
The global variable _________ always represents the current user record.

(#VISUALFORCE)`|`$User

$User is a global variable that always represents the current user record. 

All global variables are referenced with a $ symbol.
~|~
The global variable _________ is used when referencing standard Salesforce actions like displaying the Accounts tab home page, creating new accounts, editing accounts, and deleting accounts.

(#VISUALFORCE)`|`$Action

Used when referencing standard Salesforce actions like displaying the Accounts tab home page, creating new accounts, editing accounts, and deleting accounts.
~|~
The global variable _________ is used when referencing API URLs.

(#VISUALFORCE)`|`$Api

A global merge field type to use when referencing API URLs.

Use dot notation to specify an API URL from either the Enterprise or Partner WSDL, or to return the session ID.
~|~
The global variable _________ is used when referencing a Visualforce component.

(#VISUALFORCE)`|`$Component

A global merge field type to use when referencing a Visualforce component.

Each component in a Visualforce page has its own Id attribute. When the page is rendered, this attribute is the same as the Document Object Model (DOM) ID.

Use $Component.Id in JavaScript to reference a specific component on a page, where Id is the Id of the component being referenced.
~|~
The global variable _________ is used when referencing the label of an inputField component on a Visualforce page that is associated with a message.

(#VISUALFORCE)`|`$ComponentLabel

A global merge field to use when referencing the label of an inputField component on a Visualforce page that is associated with a message.

Returns the label of an inputField component that is associated with a message.
~|~
The global variable _________ is used when referencing the current Visualforce page or page request.

(#VISUALFORCE)`|`$CurrentPage

Used when referencing the current Visualforce page or page request.

Use this global in a Visualforce page to reference the current page name ($CurrentPage.Name) or the URL of the current page ($CurrentPage.URL). 

Use $CurrentPage.parameters.parameterName to reference page request parameters and values, where parameterName is the request parameter being referenced.
~|~
The global variable _________ is used when referencing a custom label in a Visualforce page.

(#VISUALFORCE)`|`$Label

Used when referencing a custom label in a Visualforce page.

Use this expression in a Visualforce page to access a custom label. When the application server constructs the page to be presented to the end-user's browser, the value returned depends upon the language setting of the contextual user. 

The value returned is one of the following, in order of precedence:

◊ the local translation's text
◊ the packaged translation's text
◊ the master label's text
~|~
The global variable _________ is used when referencing a standard Sites label in a Visualforce page. 

(#VISUALFORCE)`|`$Label.Site

Used when referencing a standard Sites label in a Visualforce page. Like all standard labels, the text will display based on the user's language and locale.

Use this expression in a Visualforce page to access a standard Sites label. When the application server constructs the page to be presented to the end-user's browser, the value returned depends on the language and locale of the user.
~|~
The global variable _________ is used when referencing standard or custom objects (such as Accounts, Cases, or Opportunities) and the values of their fields.

(#VISUALFORCE)`|`$ObjectType

Used when referencing standard or custom objects (such as Accounts, Cases, or Opportunities) and the values of their fields.

Use dot notation to specify an object, such as {!$ObjectType.Case}.
Optionally, select a field on that object using the following syntax: {!$ObjectType.Role_Limit__c.Fields.Limit__c}

Example:
The following example retrieves the label for the Account Name field:
{!$ObjectType.Account.Fields.Name.Label}

You can also use dynamic references to retrieve information about an object through $ObjectType. For example, {!$ObjectType.Account.Fields['Name'].Type}
~|~
The global variable _________ is used when referencing information about your company profile. 

(#VISUALFORCE)`|`$Organization

Used when referencing information about your company profile. Use organization merge fields to reference your organization's city, fax, ID, or other details.

Use dot notation to access your organization's information. For example:

{!$Organization.Street}
{!$Organization.State}

The organization merge fields get their values from whatever values are currently stored as part of your company information in Salesforce.

Note that {!$Organization.UiSkin} is a picklist value, and so should be used with picklist functions such as ISPICKVAL() in custom fields, validation rules, and Visualforce expressions.
~|~
The global variable _________ is used when referencing a Visualforce page.

(#VISUALFORCE)`|`$Page

Used when referencing a Visualforce page.

Use this expression in a Visualforce page to link to another Visualforce page.

Example
<apex:page>
 <h1>Linked</h1>
 <apex:outputLink value="{!$Page.otherPage}">
 This is a link to another page.
 </apex:outputLink>
</apex:page>
~|~
The global variable _________ is used when referencing information about the current user's profile.

(#VISUALFORCE)`|`$Profile

Used when referencing information about the current user's profile. Use profile merge fields to reference information about the user's profile such as license type or name.

Use dot notation to access your organization's information.
Note that you can't use the following $Profile values in Visualforce:
LicenseType
UserType

Example
{!$Profile.Id}
 
{!$Profile.Name}
~|~
The global variable _________ is used when referencing an existing static resource by name in a Visualforce page.

(#VISUALFORCE)`|`$Resource

Used when referencing an existing static resource by name in a Visualforce page. You can also use resource merge fields in URLFOR functions to reference a particular file in a static resource archive.

Use {!$Resource} to reference an existing static resource. The format is {!$Resource.nameOfResource}, such as {!$Resource.TestImage}.

Examples
The Visualforce component below references an image file that was uploaded as a static resource and given the name TestImage:

<apex:image url="{!$Resource.TestImage}" width="50" height="50"/>

To reference a file in an archive (such as a .zip or .jar file), use the URLFOR function. Specify the static resource name that you provided when you uploaded the archive with the first parameter, and the path to the desired file within the archive with the second. For example:

<apex:image url="{!URLFOR($Resource.TestZip,
 'images/Bluehills.jpg')}" width="50" height="50"/>

You can also use dynamic references to reference static resources. For example, {!$Resource[appLogo]}, assuming there is an appLogo property or getAppLogo() method in your page's controller.
~|~
The global variable _________ is used when referencing an existing custom s-control by name.

(#VISUALFORCE)`|`$SControl

Used when referencing an existing custom s-control by name. This merge field type results in a URL to a page where the s-control executes.

IMPORTANT!
S-controls have been superseded by Visualforce pages. Organizations that haven't previously used s-controls can't create them. Existing s-controls are unaffected, and can still be edited.

USAGE
Use dot notation to access an existing s-control by its name.

EXAMPLE
The following example shows how to link to an s-control named HelloWorld in a Visualforce page:
<apex:page>
<apex:outputLink 
 value="{!$SControl.HelloWorld}">Open the HelloWorld s-control</apex:outputLink>
</apex:page>
Note that if you simply want to embed an s-control in a page, you can use the <apex:scontrol> tag without the $SControl merge field. For example:
<apex:page>
 <apex:scontrol controlName="HelloWorld" />
</apex:page>
~|~
The global variable _________ is Used when referencing a Custom Setting of type "hierarchy."

(#VISUALFORCE)`|`$Setup

Used when referencing a Custom Setting of type "hierarchy."

USAGE
Use $Setup to access hierarchical custom settings and their field values using dot notation. For example, $Setup.App_Prefs__c.Show_Help_Content__c.

Hierarchical custom settings allow values at any of three different levels:
- Organization, the default value for everyone
- Profile, which overrides the Organization value
- User, which overrides both Organization and Profile values

Salesforce automatically determines the correct value for this custom setting field based on the running user's current context.
Custom settings of type "list" aren't available on Visualforce pages using this global variable. You can access list custom settings in Apex.

EXAMPLE
The following example illustrates how to conditionally display an extended help message for an input field, depending on the user's preference:
<apex:page>
 <apex:inputField value="{!usr.Workstation_Height__c}"/>
 <apex:outputPanel id="helpWorkstationHeight" 
 rendered="{!$Setup.App_Prefs__c.Show_Help_Content__c}">
 Enter the height for your workstation in inches, measured from the 
 floor to top of the work surface.
 </apex:outputPanel>
 ...
</apex:page>

If the organization level for the custom setting is set to true, users see the extended help message by default. If an individual prefers to not see the help messages, they can set their custom setting to false, to override the organization (or profile) value.
~|~
The global variable _________ returns the API name of the current site.

(#VISUALFORCE)`|`$Site.Name 

Returns the API name of the current site.
~|~
The global variable _________ returns the Force.com domain name for your organization.

(#VISUALFORCE)`|`$Site.Domain

Returns the Force.com domain name for your organization.
~|~
The global variable _________ returns the value of the Custom Web Address field for the current site.

(#VISUALFORCE)`|`$Site.CustomWebAddress

Returns the value of the Custom Web Address field for the current site.
~|~
The global variable _________ returns the original URL for the current page if it's a designated error page for the site; otherwise, returns null.

(#VISUALFORCE)`|`$Site.OriginalUrl

Returns the original URL for the current page if it's a designated error page for the site; otherwise, returns null.
~|~
The global variable _________ returns the value of the site URL for the current request

(#VISUALFORCE)`|`$Site.CurrentSiteUrl

Returns the value of the site URL for the current request (for example, http://myco.com/ or https://myco.force.com/prefix/).
~|~
The global variable _________ returns true if the current site is associated with an active login-enabled portal; otherwise returns false.

(#VISUALFORCE)`|`$Site.LoginEnabled

Returns true if the current site is associated with an active login-enabled portal; otherwise returns false.
~|~
The global variable _________ returns true if the current site is associated with an active self-registration-enabled Customer Portal; otherwise returns false.

(#VISUALFORCE)`|`$Site.RegistrationEnabled

Returns true if the current site is associated with an active self-registration-enabled Customer Portal; otherwise returns false.
~|~
The global variable _________ returns TRUE if the currently logged-in user's password is expired. For non-authenticated users, returns false.

(#VISUALFORCE)`|`$Site.IsPasswordExpired

For authenticated users, returns true if the currently logged-in user's password is expired. For non-authenticated users, returns false.
~|~
The global variable _________ returns the value of the Site Contact field for the current site.

(#VISUALFORCE)`|`$Site.AdminEmailAddress

Returns the value of the Site Contact field for the current site.
~|~
The global variable _________ returns the URL path prefix of the current site.

(#VISUALFORCE)`|`$Site.Prefix

Returns the URL path prefix of the current site. For example, if your site URL is myco.force.com/partners, partners is the path prefix. 

Returns null if the prefix is not defined, or if the page was accessed using a custom Web address.
~|~
The global variable _________ returns the template name associated with the current site; returns the default template if no template has been designated.

(#VISUALFORCE)`|`$Site.Template

Returns the template name associated with the current site; returns the default template if no template has been designated.
~|~
The global variable _________ returns an error message for the current page if it's a designated error page for the site and an error exists; otherwise, returns an empty string.

(#VISUALFORCE)`|`$Site.ErrorMessage

Returns an error message for the current page if it's a designated error page for the site and an error exists; otherwise, returns an empty string.
~|~
The global variable _________ returns the error description for the current page if it's a designated error page for the site and an error exists; otherwise, returns an empty string.

(#VISUALFORCE)`|`$Site.ErrorDescription

Returns the error description for the current page if it's a designated error page for the site and an error exists; otherwise, returns an empty string.
~|~
The global variable _________ the tracking code associated with your site. 

(#VISUALFORCE)`|`$Site.AnalyticsTrackingCode

The tracking code associated with your site. This code can be used by services like Google Analytics to track page request data for your site.
~|~
The global variable _________ represents the literal value of 1900-01-01 00:00:00.

(#VISUALFORCE)`|`$System.OriginDateTime

Represents the literal value of 1900-01-01 00:00:00.

USAGE
Use this global variable when performing date/time offset calculations, or to assign a literal value to a date/time field.

EXAMPLE
The following example calculates the number of days that have passed since January 1, 1900:

{!NOW() - $System.OriginDateTime}
~|~
The global variable _________ is used when referencing information about the current user.

(#VISUALFORCE)`|`$User

Used when referencing information about the current user. User merge fields can reference information about the user such as alias, title, and ID.

USAGE
Use dot notation to access the current user's information. For example:
{!IF (CONTAINS($User.Alias, Smith) True, False)}

EXAMPLE
The following example displays the current user's company name, as well as the status of the current user (which returns a Boolean value).

<apex:page>
 <h1>Congratulations</h1>
 This is your new Apex Page
 <p>The current company name for this 
 user is: {!$User.CompanyName}</p>
 <p>Is the user active? 
 {!$User.isActive}</p>
</apex:page>
~|~
The global variables _________ and ________ identify the Salesforce theme (look and feel) a user sees on a given Web page.

(#VISUALFORCE)`|`$User.UITheme and $User.UIThemeDisplayed

Identifies the Salesforce theme (look and feel) a user sees on a given Web page.

The difference between the two variables is that $User.UITheme returns the look and feel the user is supposed to see, while $User.UIThemeDisplayed returns the look and feel the user actually sees. For example, a user may have the permissions to see the new user interface theme look and feel, but if they are using a browser that doesn't support that look and feel, for example, Internet Explorer 6, $User.UIThemeDisplayed returns a different value.

USAGE
Use these variables to identify the CSS used to render Salesforce web pages to a user. Both variables return one of the following values:
- Theme1—Obsolete Salesforce theme
- Theme2—Salesforce theme used prior to Spring '10
- PortalDefault—Salesforce Customer Portal theme
- Webstore—Salesforce AppExchange theme
- Theme3—Current Salesforce theme, introduced during Spring '10
~|~
The global variable _________ is used when referencing information about the current user's role.

(#VISUALFORCE)`|`$UserRole

Used when referencing information about the current user's role. Role merge fields can reference information such as role name, description, and ID.

USAGE
Use dot notation to access information about the current user's role.

Note that you can't use the following $UserRole values in Visualforce:

- CaseAccessForAccountOwner
- ContactAccessForAccountOwner
- OpportunityAccessForAccountOwner
- PortalType

EXAMPLE
{!$UserRole.LastModifiedById}
~|~
ApexPages Methods

Use ApexPages to add and check for messages associated with the current page, as well as to reference the current page. In addition, ApexPages is used as a namespace for the PageReference and Message classes.

The following table lists the ApexPages methods:

◊ addMessage
◊ addMessages
◊ getMessages
◊ hasMessages
◊ hasMessages

(#APEX)
(#VISUALFORCE)`|`ApexPages Methods

Use ApexPages to add and check for messages associated with the current page, as well as to reference the current page. In addition, ApexPages is used as a namespace for the PageReference and Message classes.

The following table lists the ApexPages methods:

◊ addMessage
◊ addMessages
◊ getMessages
◊ hasMessages
◊ hasMessages
~|~
This Apex class lets a developer create an action method that can be used in a Visualforce custom controller or controller extension. 

A. Apex.Action Class
B. ApexPages.Action Class
C. Action Class
D. Visualforce.Action Class
E. Component.Action Class
F. None of the above

(#APEX)
(#VISUALFORCE)`|`B. ApexPages.Action Class

You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 

For example, you could create a saveOver method on a controller extension that performs a custom save.
~|~
This Apex class lets a developer access cookies for a Force.com site using Apex.

A. Cookie Class
B. PageReference.Cookie Class
C. ApexPages.Cookie Class
D. Component.Cookie Class
E. Visualforce.Cookie Class
F. None of the above

(#APEX)
(#VISUALFORCE)`|`A. Cookie Class

The Cookie class lets you access cookies for your Force.com site using Apex.

Use the setCookies method of the pageReference class to attach cookies to a page. 

IMPORTANT

◊ Cookie names and values set in Apex are URL encoded, that is, characters such as @ are replaced with a percent sign and their hexadecimal representation.

◊ The setCookies method adds the prefix "apex__" to the cookie names.

◊ Setting a cookie's value to null sends a cookie with an empty string value instead of setting an expired attribute.

◊ After you create a cookie, the properties of the cookie can't be changed.

◊ Be careful when storing sensitive information in cookies. Pages are cached regardless of a cookie value. If you use a cookie value to generate dynamic content, you should disable page caching. For more information, see "Caching Force.com Sites Pages" in the Salesforce online help.
~|~
This Apex class offers Ideas-specific functionality in addition to what is provided by the StandardController class.

A. StandardControllerIdeas Class
B. IdeaCustomController Class
C. IdeaStandard Class
D. IdeaStandardController Class
E. StandardIdeasController Class
F. None of the above

(#APEX)
(#VISUALFORCE)`|`D. IdeaStandardController Class

IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController Class.

NOTE:
The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your salesforce.com representative.
~|~
This Apex class offers Ideas-specific functionality in addition to what is provided by the StandardSetController Class.

A. IdeaSetControllerStandard Class
B. IdeaStandardSetController Class
C. StandardIdeaSet Class
D. StandardSetIdeas Class
E. StandardSetIdeasExtension Class
F. None of the above

(#APEX)
(#VISUALFORCE)`|`B. IdeaStandardSetController Class

IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController Class.

NOTE
The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your salesforce.com representative.
~|~
This Apex class offers article-specific functionality in addition to what is provided by the StandardController Class.

A. ArticleExtensionStandard Class
B. StandardKnowledgeContainer Class
C. StandardKnowledgeController Class
D. KnowledgeVersionStandardController Class
E. KnowledgeArticleVersionStandardController Class
F. None of the above

(#APEX)
(#VISUALFORCE)`|`E. KnowledgeArticleVersionStandardController Class

KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController Class.
~|~
This Apex class allows developers to collect and display errors when building custom controllers or extensions.

A. Exception Class
B. Message Class
C. Debug Class
D. Validation Class
E. Messaging Class
F. None of the above

(#APEX)
(#VISUALFORCE)`|`B. Message Class

When using a standard controller, all validation errors, both custom and standard, that occur when the end user saves the page are automatically added to the page error collections. 

If there is an inputField component bound to the field with an error, the message is added to the components error collection. All messages are added to the pages error collection.

If your application uses a custom controller or extension, you must use the message class for collecting errors.
~|~
This Apex class allows developers to reference an instantiation of a page.

A. ExistingPage Class
B. VisualforcePage Class
C. PageReference Class
D. URLReference Class
E. PageURLReference Class
F. None of the above

(#APEX)
(#VISUALFORCE)`|`C. PageReference Class

A PageReference is a reference to an instantiation of a page. Among other attributes, PageReferences consist of a URL and a set of query parameter names and values.

Use a PageReference object:

◊ To view or set query string parameters and values for a page

◊ To navigate the user to a different page as the result of an action method
~|~
Objects of this Apex class specify one of the possible values for a Visualforce selectCheckboxes, selectList, or selectRadio component. 

A. Select Class
B. SelectOption Class
C. OptionSelection Class
D. InputSelection Class
E. InputOption Class
F. None of the above

(#APEX)
(#VISUALFORCE)`|`B. SelectOption Class

A SelectOption object specifies one of the possible values for a Visualforce selectCheckboxes, selectList, or selectRadio component. 

It consists of a label that is displayed to the end user, and a value that is returned to the controller if the option is selected. 

A SelectOption can also be displayed in a disabled state, so that a user cannot select it as an option, but can still view it.
~|~
Objects of this Apex class reference the pre-built Visualforce controllers provided by salesforce.com. 

A. VisualforceSetController Class
B. VisualforceController Class
C. Controller Class
D. StandardSetController Class
E. StandardController Class
F. None of the above

(#APEX)
(#VISUALFORCE)`|`E. StandardController Class

StandardController objects reference the pre-built Visualforce controllers provided by salesforce.com. 

The only time it is necessary to refer to a StandardController object is when defining an extension for a standard controller. 

StandardController is the data type of the single argument in the extension class constructor.
~|~
Objects of this Apex class allow developers to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce.

A. StandardSetController Class
B. StandardController Class
C. Controller Class
D. VisualforceSetController Class
E. VisualforceControllerClass
F. None of the above

(#APEX)
(#VISUALFORCE)`|`A. StandardSetController Class

StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. 

The StandardSetController class also contains a prototype object. This is a single sObject contained within the Visualforce StandardSetController class. If the prototype object's fields are set, those values are used during the save action, meaning that the values are applied to every record in the set controller's collection. This is useful for writing pages that perform mass updates (applying identical changes to fields within a collection of objects).

Note
The maximum record limit for StandardSetController is 10,000 records. Instantiating StandardSetController using a query locator returning more than 10,000 records causes a LimitException to be thrown. However, instantiating StandardSetController with a list of more than 10,000 records doesn't throw an exception, and instead truncates the records to the limit.
~|~
This StandardController class method adds a reference to each field specified in fieldNames so that the controller can explicitly access those fields as well.

(#APEX)
(#VISUALFORCE)`|`StandardController.addFields()

ARGUMENTS: List<String> fieldNames
RETURNS: Void

When a Visualforce page is loaded, the fields accessible to the page are based on the fields referenced in the Visualforce markup. This method adds a reference to each field specified in fieldNames so that the controller can explicitly access those fields as well.

This method should be called before a record has been loaded—typically, it's called by the controller's constructor. If this method is called outside of the constructor, you must use the reset() method before calling addFields().

The strings in fieldNames can either be the API name of a field, such as AccountId, or they can be explicit relationships to fields, such as foo__r.myField__c.

This method is only for controllers used by dynamicVisualforce bindings.
~|~
This StandardController class method returns the PageReference of the cancel page.

(#APEX)
(#VISUALFORCE)`|`StandardController.cancel()

RETURNS: System.PageReference

Returns the PageReference of the cancel page.
~|~
This StandardController class method deletes the record and returns the PageReference of the delete page.

(#APEX)
(#VISUALFORCE)`|`StandardController.delete()

RETURNS: System.PageReference

Deletes record and returns the PageReference of the delete page.
~|~
This StandardController class method returns the PageReference of the standard edit page.

(#APEX)
(#VISUALFORCE)`|`StandardController.edit()

RETURNS: System.PageReference

Returns the PageReference of the standard edit page.
~|~
This StandardController class method returns the ID of the record that is currently in context, based on the value of the id query string parameter in the Visualforce page URL.

(#APEX)
(#VISUALFORCE)`|`StandardController.getId()

RETURNS: String

Returns the ID of the record that is currently in context, based on the value of the id query string parameter in the Visualforce page URL.
~|~
This StandardController class method returns the record that is currently in context, based on the value of the id query string parameter in the Visualforce page URL.

(#APEX)
(#VISUALFORCE)`|`StandardController.getRecord()

RETURNS: SObject

Returns the record that is currently in context, based on the value of the id query string parameter in the Visualforce page URL.

Note that only the fields that are referenced in the associated Visualforce markup are available for querying on this SObject. All other fields, including fields from any related objects, must be queried using a SOQL expression.

Tip
You can work around this restriction by including a hidden component that references any additional fields that you want to query. Hide the component from display by setting the component's rendered attribute to false. For example:

<apex:outputText value="{!account.billingcity} {!account.contacts}" rendered="false"/>
~|~
This StandardController class method forces the controller to reacquire access to newly referenced fields. Any changes made to the record prior to this method call are discarded.

(#APEX)
(#VISUALFORCE)`|`StandardController.reset()

RETURNS: Void

Forces the controller to reacquire access to newly referenced fields. Any changes made to the record prior to this method call are discarded.

This method is only used if addFields is called outside the constructor, and it must be called directly before addFields.

This method is only for controllers used by dynamicVisualforce bindings.
~|~
This StandardController class method saves changes and returns the updated PageReference.

(#APEX)
(#VISUALFORCE)`|`StandardController.save()

RETURNS: System.PageReference

Saves changes and returns the updated PageReference.
~|~
This StandardController class method returns the PageReference object of the standard detail page.

(#APEX)
(#VISUALFORCE)`|`StandardController.view()

RETURNS: System.PageReference

Returns the PageReference object of the standard detail page.
~|~
True or False?

Primitive Apex types, like Integer and Boolean are non-nullable.

(#VISUALFORCE)
(#APEX)
(#PLATFORM)`|`False.

All Apex data types are nullable. This means that primitive variables, like Integer, Boolean, etc., are initialized to null.

You must be sure to initialize all the variables that you use.
~|~
The StandardSetController class method __________ returns the PageReference of the original page, if known, or the home page.

(#APEX)
(#VISUALFORCE)`|`StandardSetController.cancel()

RETURNS: System.PageReference

Returns the PageReference of the original page, if known, or the home page.
~|~
The StandardSetController class method __________ returns the first page of records.

(#APEX)
(#VISUALFORCE)`|`StandardSetController.first()

RETURNS: Void

Returns the first page of records.
~|~
The StandardSetController class method __________ indicates whether there are more records in the set than the maximum record limit. 

(#APEX)
(#VISUALFORCE)`|`StandardSetController.getCompleteResult()

RETURNS: Boolean

Indicates whether there are more records in the set than the maximum record limit. If this is false, there are more records than you can process using the list controller. The maximum record limit is 10,000 records.
~|~
The StandardSetController class method __________ returns the ID of the filter that is currently in context.

(#APEX)
(#VISUALFORCE)`|`StandardSetController.getFilterId()

RETURNS: String

Returns the ID of the filter that is currently in context.
~|~
The StandardSetController class method __________ indicates whether there are more records after the current page set.

(#APEX)
(#VISUALFORCE)`|`StandardSetController.getHasNext()

RETURNS: Boolean

Indicates whether there are more records after the current page set.
~|~
The StandardSetController class method __________ indicates whether there are more records before the current page set.

(#APEX)
(#VISUALFORCE)`|`StandardSetController.getHasPrevious()

RETURNS: Boolean

Indicates whether there are more records before the current page set.
~|~
The StandardSetController class method __________ returns a list of the listviews available to the current user.

(#APEX)
(#VISUALFORCE)`|`StandardSetController.getListViewOptions()

RETURNS: System.SelectOption[]

Returns a list of the listviews available to the current user.
~|~
The StandardSetController class method __________ returns the page number of the current page set. Note that the first page returns 1.

(#APEX)
(#VISUALFORCE)`|`StandardSetController.getPageNumber()

RETURNS: Integer

Returns the page number of the current page set. Note that the first page returns 1.
~|~
The StandardSetController class method __________ returns the number of records included in each page set.

(#APEX)
(#VISUALFORCE)`|`StandardSetController.getPageSize()

RETURNS: Integer

Returns the number of records included in each page set.
~|~
The StandardSetController class method __________ returns the sObject that represents the changes to the selected records.

(#APEX)
(#VISUALFORCE)`|`StandardSetController.getRecord()

RETURNS: sObject

Returns the sObject that represents the changes to the selected records. This retrieves the prototype object contained within the class, and is used for performing mass updates.
~|~
The StandardSetController class method __________ returns the list of sObjects in the current page set. 

(#APEX)
(#VISUALFORCE)`|`StandardSetController.getRecords()

RETURNS: sObject[]

Returns the list of sObjects in the current page set. This list is immutable, i.e. you can't call clear() on it.
~|~
The StandardSetController class method __________ returns the number of records in the set.

(#APEX)
(#VISUALFORCE)`|`StandardSetController.getResultSize()

RETURNS: Integer

Returns the number of records in the set.
~|~
The StandardSetController class method __________ returns the list of sObjects that have been selected.

(#APEX)
(#VISUALFORCE)`|`StandardSetController.getSelected()

RETURNS: sObject[]

Returns the list of sObjects that have been selected.
~|~
The StandardSetController class method __________ returns the last page of records.

(#APEX)
(#VISUALFORCE)`|`StandardSetController.last()

RETURNS: Void

Returns the last page of records.
~|~
The StandardSetController class method __________ returns the next page of records.

(#APEX)
(#VISUALFORCE)`|`StandardSetController.next()

RETURNS: Void

Returns the next page of records.
~|~
The StandardSetController class method __________ returns the previous page of records.

(#APEX)
(#VISUALFORCE)`|`StandardSetController.previous()

RETURNS: Void

Returns the previous page of records.
~|~
The StandardSetController class method __________ inserts new records or updates existing records that have been changed.

(#APEX)
(#VISUALFORCE)`|`StandardSetController.save()

RETURNS: System.PageReference

Inserts new records or updates existing records that have been changed. 

After this operation is finished, it returns a PageReference to the original page, if known, or the home page.
~|~
The StandardSetController class method __________ sets the filter ID of the controller.

(#APEX)
(#VISUALFORCE)`|`StandardSetController.setFilterID()

ARGUMENTS: String filterId
RETURNS: Void

Sets the filter ID of the controller.
~|~
The StandardSetController class method __________ sets the page number.

(#APEX)
(#VISUALFORCE)`|`StandardSetController.setpageNumber()

ARGUMENTS: Integer pageNumber
RETURNS: Void

Sets the page number.
~|~
The StandardSetController class method __________ sets the number of records in each page set.

(#APEX)
(#VISUALFORCE)`|`StandardSetController.setPageSize()

ARGUMENTS: Integer pageSize
RETURNS: Void

Sets the number of records in each page set.
~|~
The StandardSetController class method __________ sets the selected records.

(#APEX)
(#VISUALFORCE)`|`StandardSetController.setSelected()

ARGUMENTS: sObjects[] selectedRecords
RETURNS: Void

Sets the selected records.
~|~
This integration resource is specific to an individual organization, and exposes all of the standard objects, custom objects, and any custom fields through the SOAP interface.

A. System WSDL
B. Partner WSDL
C. Custom WSDL
D. Enterprise WSDL
E. Portal WSDL
F. None of the above

(#PLATFORM)`|`D. Enterprise WSDL

Enterprise Web Services WSDL—Used by enterprise developers to build client applications for a single Salesforce organization. The enterprise WSDL is strongly typed, which means that it contains objects and fields with specific data types, such as int and string. Customers who use the enterprise WSDL document must download and re-consume it whenever their organization makes a change to its custom objects or fields or whenever they want to use a different version of the API. To access the current WSDL for your organization, log in to your Salesforce organization and from Setup, click Develop | API | Generate Enterprise WSDL.
~|~
This integration resource provides generic access to any organization, and exposes standard objects and fields through the SOAP interface.

A. System WSDL
B. Partner WSDL
C. Custom WSDL
D. Enterprise WSDL
E. Portal WSDL
F. None of the above

(#PLATFORM)`|`B. Partner WSDL

Partner Web Services WSDL—Used for client applications that are metadata-driven and dynamic in nature. It is particularly—but not exclusively—useful to salesforce.com partners who are building client applications for multiple organizations. As a loosely typed representation of the Salesforce data model that works with name-value pairs of field names and values instead of specific data types, it can be used to access data within any organization. This WSDL is most appropriate for developers of clients that can issue a query call to get information about an object before the client acts on the object. The partner WSDL document only needs to be downloaded and consumed once per version of the API. To access the current WSDL for your organization, log in to your Salesforce organization and from Setup, click Develop | API | Generate Partner WSDL.
~|~
What is the limit on the total number of SOQL queries issued?
(As of Spring'13)

(#LIMITS)`|`100

Total number of SOQL queries issued per execution context (as of Spring'13): 100
~|~
What is the limit on the total number of SOQL queries issued for Batch Apex and future methods?
(as of Spring'13)

(#LIMITS)`|`200

Total number of SOQL queries issued for Batch Apex and future methods (as of Spring'13): 200
~|~
What is the limit on the total number of records retrieved by a single SOQL query?
(as of Spring'13)

(#LIMITS)`|`50,000

Total number of records retrieved by a single SOQL query (as of Spring'13): 50,000
~|~
What is the limit on the total number of records retrieved by all Database.getQueryLocator() method calls in a single execution context?
(as of Spring'13)

(#LIMITS)`|`10,000

Total number of records retrieved by all Database.getQueryLocator() method calls in a single execution context (as of Spring'13): 10,000
~|~
What is the limit on the total number of SOSL queries issued in a single execution context?
(as of Spring'13)

(#LIMITS)`|`20

Total number of SOSL queries issued in a single execution context (as of Spring'13): 20
~|~
What is the limit on the total number of records retrieved by a single SOSL query?
(as of Spring'13)

(#LIMITS)`|`2000

Total number of records retrieved by a single SOSL query (as of Spring'13): 2000
~|~
What is the limit on the total number of DML statements issued in a single execution context?
(as of Spring'13)

(#LIMITS)`|`150

Total number of DML statements issued in a single execution context (as of Spring'13): 150
~|~
What is the limit on the total number of records processed as a result of DML statements, Approval.process, or database.emptyRecycleBin in a single execution context?
(as of Spring'13)

(#LIMITS)`|`10,000

Total number of records processed as a result of DML statements, Approval.process, or database.emptyRecycleBin in a single execution context (as of Spring'13): 10,000
~|~
What is the limit on the total number of executed code statements in a single execution context?
(as of Spring'13)

(#LIMITS)`|`200,000

Total number of executed code statements in a single execution context (as of Spring'13): 200,000
~|~
What is the limit on the total number of executed code statements in a single execution context for Batch Apex and future methods?
(as of Spring'13)

(#LIMITS)`|`1,000,000

Total number of executed code statements in a single execution context for Batch Apex and future methods (as of Spring'13): 1,000,000
~|~
What is the limit on the total heap size per execution context?
(as of Spring'13)

(#LIMITS)`|`6 MB

Total heap size per execution context (as of Spring'13): 6 MB
~|~
What is the limit on the total heap size per execution context for Batch Apex and future methods?
(as of Spring'13)

(#LIMITS)`|`12 MB

Total heap size per execution context for Batch Apex and future methods (as of Spring'13): 12 MB
~|~
What is the limit on the total stack depth for any Apex invocation that recursively fires triggers due to insert, update, or delete statements?
(as of Spring'13)

(#LIMITS)`|`16

Total stack depth for any Apex invocation that recursively fires triggers due to insert, update, or delete statements (as of Spring'13): 16
~|~
What is the limit on the For loop list batch size?
(as of Spring'13)

(#LIMITS)`|`200

For loop list batch size (as of Spring'13): 200
~|~
What is the limit on the total number of callouts (HTTP requests or Web services calls) in a single execution context?
(as of Spring'13)

(#LIMITS)`|`10

Total number of callouts (HTTP requests or Web services calls) in a single execution context (as of Spring'13): 10
~|~
What is the limit on the maximum timeout for all callouts (HTTP requests or Web services calls) in a single execution context?
(as of Spring'13)

(#LIMITS)`|`120 seconds

Maximum timeout for all callouts (HTTP requests or Web services calls) in a single execution context (as of Spring'13): 120 seconds
~|~
What is the default timeout of callouts (HTTP requests or Web services calls) when made within an execution context?
(as of Spring'13)

(#LIMITS)`|`10 seconds

Default timeout of callouts (HTTP requests or Web services calls) when made within an execution context (as of Spring'13): 10 seconds
~|~
What is the limit on the total number of methods with the future annotation allowed in a single execution context?
(as of Spring'13)

(#LIMITS)`|`10

Total number of methods with the future annotation allowed in a single execution context (as of Spring'13): 10
~|~
What is the maximum size of a callout request or response (HTTP request or Web services call) when made within an execution context?
(as of Spring'13)

(#LIMITS)`|`3 MB

Maximum size of a callout request or response (HTTP request or Web services call) when made within an execution context (as of Spring'13): 3 MB
~|~
What is the limit on the total number of sendEmail() method calls allowed in a single execution context?
(as of Spring'13)

(#LIMITS)`|`10

Total number of sendEmail() method calls allowed in a single execution context (as of Spring'13): 10
~|~
What is the limit on the total number of describes allowed in a single execution context?
(as of Spring'13)

(#LIMITS)`|`100

Total number of describes allowed in a single execution context (as of Spring'13): 100
~|~
What is the limit on the total number of classes that can be scheduled concurrently (i.e. Scheduled Apex)?
(as of Spring'13)

(#LIMITS)`|`100

Total number of classes that can be scheduled concurrently (i.e. Scheduled Apex) (as of Spring'13): 100
~|~
What is the limit on the total number of test classes that can be queued per a 24-hour period?
(as of Spring'13)

(#LIMITS)`|`The greater of 500, or 10 x Number of test classes in the org.

Total number of test classes that can be queued per a 24-hour period (as of Spring'13): The greater of 500 or 10 multiplied by the number of test classes in the organization
~|~
True or False?

Governor limits apply only to specific namespaces (i.e. managed packages, anonymous apex, or your org's apex).

(#LIMITS)`|`False.

Governor limits apply to an entire organization, as well as to specific namespaces. 

For example, if you install a managed package created by a salesforce.com ISV Partner from Force.com AppExchange, the components in the package belong to a namespace unique from other components in your organization. Consequently, any Apex code in that package can issue up to 150 DML statements while executing. 

In addition, any Apex code that is native to your organization can also issue up to 150 DML statements, meaning more than 150 DML statements might execute during a single request if code from the managed package and your native organization both execute.
~|~
True or False?

Code from unmanaged packages has its own separate governor limits.

(#LIMITS)`|`False.

If you install a package from AppExchange that is not created by a salesforce.com ISV Partner (ie., an "unmanaged package"), the code from that package does not have its own separate governor limit count.

Any resources it uses counts against the total for your organization. Cumulative resource messages and warning emails are also generated based on managed package namespaces as well.
~|~
Which exception type should be checked for when catching exceptions thrown when governor limits are exceeded?

A. StackOverflowException
B. LimitException
C. GovernorException
D. PlatformLimitException
E. InvalidLimitException
F. None of these

(#VISUALFORCE)
(#APEX)
(#PLATFORM)`|`F. None of these

Because Apex runs in a multitenant environment, the Apex runtime engine strictly enforces a number of limits to ensure that runaway Apex does not monopolize shared resources. These limits, or governors, track and enforce the statistics outlined in the following table. 

If some Apex code ever exceeds a limit, the associated governor issues a runtime exception that cannot be handled.
~|~
This Visualforce component provides support for invoking controller action methods directly from JavaScript code using an AJAX request.

(#VISUALFORCE)`|`<apex:actionFunction>

Provides support for invoking controller action methods directly from JavaScript code using an AJAX request. 

An <apex:actionFunction> component must be a child of an <apex:form> component.

Unlike <apex:actionSupport>, which only provides support for invoking controller action methods from other Visualforce components, <apex:actionFunction> defines a new JavaScript function which can then be called from within a block of JavaScript code.

Note: Beginning with API version 23 you can't place <apex:actionFunction> inside an iteration component — <apex:pageBlockTable>, <apex:repeat>, and so on. Put the <apex:actionFunction> after the iteration component, and inside the iteration put a normal JavaScript function that calls it.
~|~
What does this Visualforce component do?

<apex:actionFunction>

(#VISUALFORCE)`|`<apex:actionFunction>

Provides support for invoking controller action methods directly from JavaScript code using an AJAX request. 

An <apex:actionFunction> component must be a child of an <apex:form> component.

Unlike <apex:actionSupport>, which only provides support for invoking controller action methods from other Visualforce components, <apex:actionFunction> defines a new JavaScript function which can then be called from within a block of JavaScript code.

Note: Beginning with API version 23 you can't place <apex:actionFunction> inside an iteration component — <apex:pageBlockTable>, <apex:repeat>, and so on. Put the <apex:actionFunction> after the iteration component, and inside the iteration put a normal JavaScript function that calls it.
~|~
This Visualforce component creates a timer that sends an AJAX request to the server according to a time interval that you specify. Each request can result in a full or partial page update..

(#VISUALFORCE)`|`<apex:actionPoller>

Creates a timer that sends an AJAX request to the server according to a time interval that you specify. Each request can result in a full or partial page update.

An <apex:actionPoller> must be within the region it acts upon. For example, to use an <apex:actionPoller> with an <apex:actionRegion>, the <apex:actionPoller> must be within the <apex:actionRegion>.

Considerations When Using <apex:actionPoller>

◊ Action methods used by <apex:actionPoller> should be lightweight. It's a best practice to avoid performing DML, external service calls, and other resource-intensive operations in action methods called by an <apex:actionPoller>. Consider carefully the effect of your action method being called repeatedly by an <apex:actionPoller> at the interval you specify, especially if it's used on a page that will be widely distributed, or left open for long periods.

◊ <apex:actionPoller> refreshes the connection regularly, keeping login sessions alive. A page with <apex:actionPoller> on it won't time out due to inactivity.

◊ If an <apex:actionPoller> is ever re-rendered as the result of another action, it resets itself.

◊ Avoid using this component with enhanced lists.
~|~
What does this Visualforce component do?

<apex:actionPoller>

(#VISUALFORCE)`|`<apex:actionPoller>

Creates a timer that sends an AJAX request to the server according to a time interval that you specify. Each request can result in a full or partial page update.

An <apex:actionPoller> must be within the region it acts upon. For example, to use an <apex:actionPoller> with an <apex:actionRegion>, the <apex:actionPoller> must be within the <apex:actionRegion>.

Considerations When Using <apex:actionPoller>

◊ Action methods used by <apex:actionPoller> should be lightweight. It's a best practice to avoid performing DML, external service calls, and other resource-intensive operations in action methods called by an <apex:actionPoller>. Consider carefully the effect of your action method being called repeatedly by an <apex:actionPoller> at the interval you specify, especially if it's used on a page that will be widely distributed, or left open for long periods.

◊ <apex:actionPoller> refreshes the connection regularly, keeping login sessions alive. A page with <apex:actionPoller> on it won't time out due to inactivity.

◊ If an <apex:actionPoller> is ever re-rendered as the result of another action, it resets itself.

◊ Avoid using this component with enhanced lists.
~|~
This Visualforce component defines an area of a Visualforce page that demarcates which components should be processed by the Force.com server when an AJAX request is generated..

(#VISUALFORCE)`|`<apex:actionRegion>

Defines an area of a Visualforce page that demarcates which components should be processed by the Force.com server when an AJAX request is generated. 

Only the components in the body of the <apex:actionRegion> are processed by the server, thereby increasing the performance of the page.

Note that an <apex:actionRegion> component only defines which components the server processes during a request—it does not define what area(s) of the page are re-rendered when the request completes. 

To control that behavior, use the rerender attribute on an <apex:actionSupport>, <apex:actionPoller>, <apex:commandButton>, <apex:commandLink>, <apex:tab>, or <apex:tabPanel> component.
~|~
What does this Visualforce component do?

<apex:actionRegion>

(#VISUALFORCE)`|`<apex:actionRegion>

Defines an area of a Visualforce page that demarcates which components should be processed by the Force.com server when an AJAX request is generated. 

Only the components in the body of the <apex:actionRegion> are processed by the server, thereby increasing the performance of the page.

Note that an <apex:actionRegion> component only defines which components the server processes during a request—it does not define what area(s) of the page are re-rendered when the request completes. 

To control that behavior, use the rerender attribute on an <apex:actionSupport>, <apex:actionPoller>, <apex:commandButton>, <apex:commandLink>, <apex:tab>, or <apex:tabPanel> component.
~|~
This Visualforce component displays the status of an AJAX update request. 

(#VISUALFORCE)`|`<apex:actionStatus>

Displays the status of an AJAX update request. 

An AJAX request can either be in progress or complete.

<apex:actionStatus> has two facets:

◊ start
◊ stop
~|~
What does this Visualforce component do?

<apex:actionStatus>

(#VISUALFORCE)`|`<apex:actionStatus>

Displays the status of an AJAX update request. 

An AJAX request can either be in progress or complete.

<apex:actionStatus> has two facets:

◊ start
◊ stop
~|~
What facets are supported by the <apex:actionStatus> component?

(#VISUALFORCE)`|`"start" and "stop"

start Facet

The components that display when an AJAX request begins. Use this facet as an alternative to the startText attribute. Note that the order in which a start facet appears in the body of an actionStatus component does not matter, because any facet with the attribute name="start" controls the appearance of the actionStatus component when the request begins.

stop Facet

The components that display when an AJAX request completes. Use this facet as an alternative to the stopText attribute. Note that the order in which a stop facet appears in the body of an actionStatus component does not matter, because any facet with the attribute name="stop" controls the appearance of the actionStatus component when the request completes.
~|~
This Visualforce component adds AJAX support to another component, allowing the component to be refreshed asynchronously by the server when a particular event occurs, such as a button click or mouseover.

(#VISUALFORCE)`|`<apex:actionSupport>

Adds AJAX support to another component, allowing the component to be refreshed asynchronously by the server when a particular event occurs, such as a button click or mouseover.
~|~
What does this Visualforce component do?

<apex:actionSupport>

(#VISUALFORCE)`|`<apex:actionSupport>

Adds AJAX support to another component, allowing the component to be refreshed asynchronously by the server when a particular event occurs, such as a button click or mouseover.
~|~
This Visualforce component defines a data series that will be rendered as shaded areas in a Visualforce chart..

(#VISUALFORCE)`|`<apex:areaSeries>

Defines a data series that will be rendered as shaded areas in a Visualforce chart. It's similar to a line series with the fill attribute set to true, except that multiple Y values for each X will "stack" as levels upon each other.

At a minimum you must specify the fields in the data collection to use as X and Y values for each point along the line that defines the amount of area each point represents, as well as the X and Y axes to scale against. Add multiple Y values to add levels to the chart. Each level takes a new color.

Note: This component must be enclosed within an <apex:chart> component. You can have multiple <apex:areaSeries> components in a single chart, and you can add <apex:barSeries>, <apex:lineSeries>, and <apex:scatterSeries> components, but the results might not be very readable.
~|~
What does this Visualforce component do?

<apex:areaSeries>

(#VISUALFORCE)`|`<apex:areaSeries>

Defines a data series that will be rendered as shaded areas in a Visualforce chart. It's similar to a line series with the fill attribute set to true, except that multiple Y values for each X will "stack" as levels upon each other.

At a minimum you must specify the fields in the data collection to use as X and Y values for each point along the line that defines the amount of area each point represents, as well as the X and Y axes to scale against. Add multiple Y values to add levels to the chart. Each level takes a new color.

Note: This component must be enclosed within an <apex:chart> component. You can have multiple <apex:areaSeries> components in a single chart, and you can add <apex:barSeries>, <apex:lineSeries>, and <apex:scatterSeries> components, but the results might not be very readable.
~|~
This Visualforce component defines an attribute of a custom component.

(#VISUALFORCE)`|`<apex:attribute>

Defines an attribute of a custom component. 

The <apex:attribute> tag must always be a child of an <apex:component> tag.

Note that you cannot define attributes with names like id or rendered. These attributes are automatically created for all custom component definitions.
~|~
What does this Visualforce component do?

<apex:attribute>

(#VISUALFORCE)`|`<apex:attribute>

Defines an attribute of a custom component. 

The <apex:attribute> tag must always be a child of an <apex:component> tag.

Note that you cannot define attributes with names like id or rendered. These attributes are automatically created for all custom component definitions.
~|~
This Visualforce component defines an axis for a Visualforce chart..

(#VISUALFORCE)`|`<apex:axis>

Defines an axis for a Visualforce chart. Use this to set the units, scale, labeling, and other visual options for the axis. You can define up to four axes for a single chart, one for each edge.

Note: This component must be enclosed within an <apex:chart> component.
~|~
What does this Visualforce component do?

<apex:axis>

(#VISUALFORCE)`|`<apex:axis>

Defines an axis for a Visualforce chart. Use this to set the units, scale, labeling, and other visual options for the axis. You can define up to four axes for a single chart, one for each edge.

Note: This component must be enclosed within an <apex:chart> component.
~|~
This Visualforce component defines a data series that will be rendered as bars in a Visualforce chart.

(#VISUALFORCE)`|`<apex:barSeries>

Defines a data series that will be rendered as bars in a Visualforce chart. 

At a minimum you must specify the fields in the data collection to use as X and Y values for each bar, as well as the X and Y axes to scale against. Add multiple Y values to add grouped or stacked bar segments to the chart. Each segment takes a new color.

Note: This component must be enclosed within an <apex:chart> component. You can have multiple <apex:barSeries> and <apex:lineSeries> components in a single chart. You can also add <apex:areaSeries> and <apex:scatterSeries> components, but the results might not be very readable.
~|~
What does this Visualforce component do?

<apex:barSeries>

(#VISUALFORCE)`|`<apex:barSeries>

Defines a data series that will be rendered as bars in a Visualforce chart. 

At a minimum you must specify the fields in the data collection to use as X and Y values for each bar, as well as the X and Y axes to scale against. Add multiple Y values to add grouped or stacked bar segments to the chart. Each segment takes a new color.

Note: This component must be enclosed within an <apex:chart> component. You can have multiple <apex:barSeries> and <apex:lineSeries> components in a single chart. You can also add <apex:areaSeries> and <apex:scatterSeries> components, but the results might not be very readable.
~|~
This Visualforce component enables developers to easily integrate a third-party application in Salesforce.

(#VISUALFORCE)`|`<apex:canvasApp>

Enables developers to easily integrate a third-party application in Salesforce.

Renders a canvas app identified by the given developerName/namespacePrefix or applicationName/namespacePrefix value pair. The developerName attribute takes precedence if both developerName and applicationName are set.

Requirements:

◊ Force.com Canvas should be enabled in the organization.

Keep the following considerations in mind when using the <apex:canvasApp> component:

◊ A development organization is an organization in which a canvas app is developed and packaged.
◊ An installation organization is an organization in which a packaged canvas app is installed.
◊ The <apex:canvasApp> component usage in a Visualforce page isn't updated if a canvas app's application name or developer name is changed.
◊ A canvas app can be deleted even if there's a Visualforce page referencing it via <apex:canvasApp> .
~|~
What does this Visualforce component do?

<apex:canvasApp>

(#VISUALFORCE)`|`<apex:canvasApp>

Enables developers to easily integrate a third-party application in Salesforce.

Renders a canvas app identified by the given developerName/namespacePrefix or applicationName/namespacePrefix value pair. The developerName attribute takes precedence if both developerName and applicationName are set.

Requirements:

◊ Force.com Canvas should be enabled in the organization.

Keep the following considerations in mind when using the <apex:canvasApp> component:

◊ A development organization is an organization in which a canvas app is developed and packaged.
◊ An installation organization is an organization in which a packaged canvas app is installed.
◊ The <apex:canvasApp> component usage in a Visualforce page isn't updated if a canvas app's application name or developer name is changed.
◊ A canvas app can be deleted even if there's a Visualforce page referencing it via <apex:canvasApp> .
~|~
This Visualforce component creates a chart that can be rendered inside a Visualforce page. 

(#VISUALFORCE)`|`<apex:chart>

Creates a chart that can be rendered inside a Visualforce page. 

Defines general characteristics of the chart, including size and data binding.
~|~
What does this Visualforce component do?

<apex:chart>

(#VISUALFORCE)`|`<apex:chart>

Creates a chart that can be rendered inside a Visualforce page. 

Defines general characteristics of the chart, including size and data binding.
~|~
This Visualforce component defines how labels are displayed in Visualforce charts. 

(#VISUALFORCE)`|`<apex:chartLabel>

Defines how labels are displayed in Visualforce charts. 

Depending on what component wraps it, <apex:chartLabel> gives you options for affecting the display of data series labels, pie chart segment labels, and axes labels.

Note: This component must be enclosed by a data series component or an <apex:axis> component.
~|~
What does this Visualforce component do?

<apex:chartLabel>

(#VISUALFORCE)`|`<apex:chartLabel>

Defines how labels are displayed in Visualforce charts. 

Depending on what component wraps it, <apex:chartLabel> gives you options for affecting the display of data series labels, pie chart segment labels, and axes labels.

Note: This component must be enclosed by a data series component or an <apex:axis> component.
~|~
This Visualforce component defines tooltips which appear on mouseover of data series elements inside Visualforce charts.

(#VISUALFORCE)`|`<apex:chartTips>

Defines tooltips which appear on mouseover of data series elements inside Visualforce charts. 

This component offers more configuration options than the default tooltips displayed by setting the tips attribute of a data series component to true.

Note: This component must be enclosed by a data series component.
~|~
What does this Visualforce component do?

<apex:chartTips>

(#VISUALFORCE)`|`<apex:chartTips>

Defines tooltips which appear on mouseover of data series elements inside Visualforce charts. 

This component offers more configuration options than the default tooltips displayed by setting the tips attribute of a data series component to true.

Note: This component must be enclosed by a data series component.
~|~
This Visualforce component defines a single column in an <apex:dataTable> or <apex:pageBlockTable> component.

(#VISUALFORCE)`|`<apex:column>

Defines a single column in an <apex:dataTable> or <apex:pageBlockTable> component. 

An <apex:column> component must always be a child of an <apex:dataTable> or <apex:pageBlockTable> component.

Note that if you specify an sObject field as the value attribute for an <apex:column>, the associated label for that field is used as the column header by default. To override this behavior, use the headerValue attribute on the column, or the column's header facet.
~|~
What does this Visualforce component do?

<apex:column>

(#VISUALFORCE)`|`<apex:column>

Defines a single column in an <apex:dataTable> or <apex:pageBlockTable> component. 

An <apex:column> component must always be a child of an <apex:dataTable> or <apex:pageBlockTable> component.

Note that if you specify an sObject field as the value attribute for an <apex:column>, the associated label for that field is used as the column header by default. To override this behavior, use the headerValue attribute on the column, or the column's header facet.
~|~
This Visualforce component defines a button that is rendered as an HTML input element with the type attribute set to submit, reset, or image, depending on the tag's specified values. 

(#VISUALFORCE)`|`<apex:commandButton>

Defines a button that is rendered as an HTML input element with the type attribute set to submit, reset, or image, depending on the <apex:commandButton> tag's specified values. 

The button executes an action defined by a controller, and then either refreshes the current page, or navigates to a different page based on the PageReference variable that is returned by the action.

An <apex:commandButton> component must always be a child of an <apex:form> component.

This Visualforce markup...

<apex:commandButton action="{!save}" value="Save" id="theButton"/>

...renders the following HTML:

<input id="thePage:theForm:theButton" type="submit" name="thePage:theForm:theButton" value="Save" />
~|~
What does this Visualforce component do?

<apex:commandButton>

(#VISUALFORCE)`|`<apex:commandButton>

Defines a button that is rendered as an HTML input element with the type attribute set to submit, reset, or image, depending on the <apex:commandButton> tag's specified values. 

The button executes an action defined by a controller, and then either refreshes the current page, or navigates to a different page based on the PageReference variable that is returned by the action.

An <apex:commandButton> component must always be a child of an <apex:form> component.

This Visualforce markup...

<apex:commandButton action="{!save}" value="Save" id="theButton"/>

...renders the following HTML:

<input id="thePage:theForm:theButton" type="submit" name="thePage:theForm:theButton" value="Save" />
~|~
This Visualforce component creates a hyperlink that executes an action defined by a controller, and then either refreshes the current page, or navigates to a different page based on the PageReference variable that is returned by the action.

(#VISUALFORCE)`|`<apex:commandLink>

Creates a hyperlink that executes an action defined by a controller, and then either refreshes the current page, or navigates to a different page based on the PageReference variable that is returned by the action. 

An <apex:commandLink> component must always be a child of an <apex:form> component.

To add request parameters to an <apex:commandLink>, use nested <apex:param> components.

This Visualforce markup...

<apex:commandLink action="{!save}" value="Save" id="theCommandLink"/>

...renders the following HTML:

<a id="thePage:theForm:theCommandLink" href="#" onclick="generatedJs()">Save</a>
~|~
What does this Visualforce component do?

<apex:commandLink>

(#VISUALFORCE)`|`<apex:commandLink>

Creates a hyperlink that executes an action defined by a controller, and then either refreshes the current page, or navigates to a different page based on the PageReference variable that is returned by the action. 

An <apex:commandLink> component must always be a child of an <apex:form> component.

To add request parameters to an <apex:commandLink>, use nested <apex:param> components.

This Visualforce markup...

<apex:commandLink action="{!save}" value="Save" id="theCommandLink"/>

...renders the following HTML:

<a id="thePage:theForm:theCommandLink" href="#" onclick="generatedJs()">Save</a>
~|~
This Visualforce component allows a developer to define a custom Visualforce component. 

(#VISUALFORCE)`|`<apex:component>

Allows a developer to define a custom Visualforce component. 

All custom component definitions must be wrapped inside a single <apex:component> tag.
~|~
What does this Visualforce component do?

<apex:component>

(#VISUALFORCE)`|`<apex:component>

Allows a developer to define a custom Visualforce component. 

All custom component definitions must be wrapped inside a single <apex:component> tag.
~|~
This Visualforce tag allows a custom component author to define a location where a user can insert content into the custom component. 

(#VISUALFORCE)`|`<apex:componentBody>

Allows a custom component author to define a location where a user can insert content into the custom component. This is especially useful for generating custom iteration components.

This component is valid only within an <apex:component> tag, and only a single definition per custom component is allowed.
~|~
What does this Visualforce component do?

<apex:componentBody>

(#VISUALFORCE)`|`<apex:componentBody>

Allows a custom component author to define a location where a user can insert content into the custom component. This is especially useful for generating custom iteration components.

This component is valid only within an <apex:component> tag, and only a single definition per custom component is allowed.
~|~
This Visualforce component defines an area of a page that includes content from a second template page. 

(#VISUALFORCE)`|`<apex:composition>

Defines an area of a page that includes content from a second template page. 

Template pages are Visualforce pages that include one or more <apex:insert> components. 

The <apex:composition> component names the associated template, and provides body for the template's <apex:insert> components with matching <apex:define> components. Any content outside of an <apex:composition> component is not rendered.
~|~
What does this Visualforce component do?

<apex:composition>

(#VISUALFORCE)`|`<apex:composition>

Defines an area of a page that includes content from a second template page. 

Template pages are Visualforce pages that include one or more <apex:insert> components. 

The <apex:composition> component names the associated template, and provides body for the template's <apex:insert> components with matching <apex:define> components. Any content outside of an <apex:composition> component is not rendered.
~|~
This Visualforce component creates an ordered, or unordered, list of values that is defined by iterating over a set of data.

(#VISUALFORCE)`|`<apex:dataList>

Creates an ordered, or unordered, list of values that is defined by iterating over a set of data. 

The body of the <apex:dataList> component specifies how a single item should appear in the list. 

The data set can include up to 1,000 items.
~|~
What does this Visualforce component do?

<apex:dataList>

(#VISUALFORCE)`|`<apex:dataList>

Creates an ordered, or unordered, list of values that is defined by iterating over a set of data. 

The body of the <apex:dataList> component specifies how a single item should appear in the list. 

The data set can include up to 1,000 items.
~|~
This Visualforce component creates an HTML table that is defined by iterating over a set of data, displaying information about one item of data per row.

(#VISUALFORCE)`|`<apex:dataTable>

Creates an HTML table that is defined by iterating over a set of data, displaying information about one item of data per row. 

The body of the <apex:dataTable> contains one or more column components that specify what information should be displayed for each item of data. 

The data set can include up to 1,000 items.
~|~
What does this Visualforce component do?

<apex:dataTable>

(#VISUALFORCE)`|`<apex:dataTable>

Creates an HTML table that is defined by iterating over a set of data, displaying information about one item of data per row. 

The body of the <apex:dataTable> contains one or more column components that specify what information should be displayed for each item of data. 

The data set can include up to 1,000 items.
~|~
This Visualforce template component provides content for an <apex:insert> component defined in a Visualforce template page.

(#VISUALFORCE)`|`<apex:define>

A template component that provides content for an <apex:insert> component defined in a Visualforce template page.

See also: <apex:composition>, <apex:insert>
~|~
What does this Visualforce component do?

<apex:define>

(#VISUALFORCE)`|`<apex:define>

A template component that provides content for an <apex:insert> component defined in a Visualforce template page.

See also: <apex:composition>, <apex:insert>
~|~
This Visualforce component renders the standard detail page for a particular object, as defined by the associated page layout for the object in Setup.

(#VISUALFORCE)`|`<apex:detail>

Renders the standard detail page for a particular object, as defined by the associated page layout for the object in Setup. 

This component includes attributes for including or excluding the associated related lists, related list hover links, and title bar that appear in the standard Salesforce application interface.

EXAMPLE

<apex:page standardController="Account">
 <apex:detail subject="{!account.ownerId}" relatedList="false" title="false"/> 
</apex:page>
~|~
What does this Visualforce component do?

<apex:detail>

(#VISUALFORCE)`|`<apex:detail>

Renders the standard detail page for a particular object, as defined by the associated page layout for the object in Setup. 

This component includes attributes for including or excluding the associated related lists, related list hover links, and title bar that appear in the standard Salesforce application interface.

EXAMPLE

<apex:page standardController="Account">
 <apex:detail subject="{!account.ownerId}" relatedList="false" title="false"/> 
</apex:page>
~|~
This Visualforce component acts as a placeholder for dynamic Apex components. It has one required parameter—componentValue—which accepts the name of an Apex method that returns a dynamic component.

(#VISUALFORCE)`|`<apex:dynamicComponent>

This tag acts as a placeholder for dynamic Apex components. It has one required parameter—componentValue—which accepts the name of an Apex method that returns a dynamic component.

The following Visualforce components DO NOT have dynamic Apex representations:

◊ <apex:attribute>
◊ <apex:component>
◊ <apex:componentBody>
◊ <apex:composition>
◊ <apex:define>
◊ <apex:dynamicComponent>
◊ <apex:include>
◊ <apex:insert>
◊ <apex:param>
◊ <apex:variable>

Example
<apex:page controller="SimpleDynamicController">
 <apex:dynamicComponent componentValue="{!dynamicDetail}" /> 
</apex:page>

/* Controller */
public class SimpleDynamicController {
 public Component.Apex.Detail getDynamicDetail() {
 Component.Apex.Detail detail = new Component.Apex.Detail();
 detail.expressions.subject = '{!acct.OwnerId}';
 detail.relatedList = false;
 detail.title = false;
 return detail;
 }

 // Just return the first Account, for example purposes only
 public Account acct {
 get { return [SELECT Id, Name, OwnerId FROM Account LIMIT 1]; }
 }
}
~|~
What does this Visualforce component do?

<apex:dynamicComponent>

(#VISUALFORCE)`|`<apex:dynamicComponent>

This tag acts as a placeholder for dynamic Apex components. It has one required parameter—componentValue—which accepts the name of an Apex method that returns a dynamic component.

The following Visualforce components DO NOT have dynamic Apex representations:

◊ <apex:attribute>
◊ <apex:component>
◊ <apex:componentBody>
◊ <apex:composition>
◊ <apex:define>
◊ <apex:dynamicComponent>
◊ <apex:include>
◊ <apex:insert>
◊ <apex:param>
◊ <apex:variable>

Example
<apex:page controller="SimpleDynamicController">
 <apex:dynamicComponent componentValue="{!dynamicDetail}" /> 
</apex:page>

/* Controller */
public class SimpleDynamicController {
 public Component.Apex.Detail getDynamicDetail() {
 Component.Apex.Detail detail = new Component.Apex.Detail();
 detail.expressions.subject = '{!acct.OwnerId}';
 detail.relatedList = false;
 detail.title = false;
 return detail;
 }

 // Just return the first Account, for example purposes only
 public Account acct {
 get { return [SELECT Id, Name, OwnerId FROM Account LIMIT 1]; }
 }
}
~|~
This Visualforce component lets support agents who use Case Feed compose and send email messages to customers, and can be customized to support email templates and attachments.

(#VISUALFORCE)`|`<apex:emailPublisher>

The email publisher lets support agents who use Case Feed compose and send email messages to customers. 

You can customize this publisher to support email templates and attachments. 

IMPORTANT!

◊ This component can only be used in organizations that have Case Feed and Email-to-Case enabled. 
◊ Ext JS versions less than 3 should not be included on pages that use this component.

EXAMPLE: This example displays the email publisher.

<apex:page standardController="Case" showHeader="true">
 <apex:emailPublisher 
 id="myEmailPublisher" 
 entityId="{!case.id}" 
 width="600px"
 title="Send an Email"
 expandableHeader="false"
 autoCollapseBody="false"
 showAdditionalFields="false"
 fromVisibility="selectable"
 toVisibility="editable"
 bccVisibility="hidden" 
 ccVisibility="hidden"
 emailBody=""
 subject=""
 toAddresses=""
 onSubmitFailure="alert('failed');"
 fromAddresses="person1@mycompany.com,person2@mycompany.com"
 /> 
</apex:page>
~|~
What does this Visualforce component do?

<apex:emailPublisher>

(#VISUALFORCE)`|`<apex:emailPublisher>

The email publisher lets support agents who use Case Feed compose and send email messages to customers. 

You can customize this publisher to support email templates and attachments. 

IMPORTANT!

◊ This component can only be used in organizations that have Case Feed and Email-to-Case enabled. 
◊ Ext JS versions less than 3 should not be included on pages that use this component.

EXAMPLE: This example displays the email publisher.

<apex:page standardController="Case" showHeader="true">
 <apex:emailPublisher 
 id="myEmailPublisher" 
 entityId="{!case.id}" 
 width="600px"
 title="Send an Email"
 expandableHeader="false"
 autoCollapseBody="false"
 showAdditionalFields="false"
 fromVisibility="selectable"
 toVisibility="editable"
 bccVisibility="hidden" 
 ccVisibility="hidden"
 emailBody=""
 subject=""
 toAddresses=""
 onSubmitFailure="alert('failed');"
 fromAddresses="person1@mycompany.com,person2@mycompany.com"
 /> 
</apex:page>
~|~
This Visualforce component renders the list view picklist for an object, including its associated list of records for the currently selected view. In standard Salesforce applications this component is displayed on the main tab for a particular object.

(#VISUALFORCE)`|`<apex:enhancedList>

Renders the list view picklist for an object, including its associated list of records for the currently selected view. In standard Salesforce applications this component is displayed on the main tab for a particular object. 

<apex:enhancedList> has additional attributes that can be specified, such as the height and rows per page, as compared to <apex:listView>.

IMPORTANT! 

◊ When an <apex:enhancedList> is rerendered through another component's rerender attribute, the <apex:enhancedList> must be inside of an <apex:outputPanel> component that has its layout attribute set to "block". 

◊ The <apex:enhancedList> component is not allowed on pages that have the attribute showHeader set to false. 

◊ You can only have five <apex:enhancedList> components on a single page. 

◊ Ext JS versions less than 3 should not be included on pages that use this component.

See also: <apex:listView>.

EXAMPLE

<apex:page>
 <apex:enhancedList type="Account" height="300" rowsPerPage="10" id="AccountList" />
 <apex:enhancedList type="Lead" height="300" rowsPerPage="25"
 id="LeadList" customizable="False" />
</apex:page>
~|~
What does this Visualforce component do?

<apex:enhancedList>

(#VISUALFORCE)`|`<apex:enhancedList>

Renders the list view picklist for an object, including its associated list of records for the currently selected view. In standard Salesforce applications this component is displayed on the main tab for a particular object. 

<apex:enhancedList> has additional attributes that can be specified, such as the height and rows per page, as compared to <apex:listView>.

IMPORTANT! 

◊ When an <apex:enhancedList> is rerendered through another component's rerender attribute, the <apex:enhancedList> must be inside of an <apex:outputPanel> component that has its layout attribute set to "block". 

◊ The <apex:enhancedList> component is not allowed on pages that have the attribute showHeader set to false. 

◊ You can only have five <apex:enhancedList> components on a single page. 

◊ Ext JS versions less than 3 should not be included on pages that use this component.

See also: <apex:listView>.

EXAMPLE

<apex:page>
 <apex:enhancedList type="Account" height="300" rowsPerPage="10" id="AccountList" />
 <apex:enhancedList type="Lead" height="300" rowsPerPage="25"
 id="LeadList" customizable="False" />
</apex:page>
~|~
This Visualforce component creates a placeholder for content that will be rendered in a specific part of the parent component, such as the header or footer of an <apex:dataTable>.

(#VISUALFORCE)`|`<apex:facet>

Creates a placeholder for content that will be rendered in a specific part of the parent component, such as the header or footer of an <apex:dataTable>.

◊ An <apex:facet> component can only exist in the body of a parent component IF the parent supports facets. 

◊ The name of the facet component must match one of the pre-defined facet names on the parent component. This name determines where the content of the facet component is rendered. 

◊ The order in which a facet component is defined within the body of a parent component does not affect the appearance of the parent component.

See <apex:dataTable> for an example of facets.

Note: Although you can't represent an <apex:facet> directly in Apex, you can specify it on a dynamic component that has the facet. For example:

 Component.apex.dataTable dt = new Component.apex.dataTable(); 
 dt.facets.header = 'Header Facet';

EXAMPLE:

<!-- Shows a two column table of contacts associated with the account. 
The account column headers are controlled by the facets.-->

<apex:page standardController="Account">
 <apex:pageBlock title="Contacts">
 <apex:dataTable value="{!account.Contacts}" var="contact" cellPadding="4" border="1">
 <apex:column >
 <apex:facet name="header">Name</apex:facet>
 {!contact.Name}
 </apex:column>
 <apex:column >
 <apex:facet name="header">Phone</apex:facet>
 {!contact.Phone}
 </apex:column>
 </apex:dataTable>
 </apex:pageBlock>
</apex:page>
~|~
What does this Visualforce component do?

<apex:facet>

(#VISUALFORCE)`|`<apex:facet>

Creates a placeholder for content that will be rendered in a specific part of the parent component, such as the header or footer of an <apex:dataTable>.

◊ An <apex:facet> component can only exist in the body of a parent component IF the parent supports facets. 

◊ The name of the facet component must match one of the pre-defined facet names on the parent component. This name determines where the content of the facet component is rendered. 

◊ The order in which a facet component is defined within the body of a parent component does not affect the appearance of the parent component.

See <apex:dataTable> for an example of facets.

Note: Although you can't represent an <apex:facet> directly in Apex, you can specify it on a dynamic component that has the facet. For example:

 Component.apex.dataTable dt = new Component.apex.dataTable(); 
 dt.facets.header = 'Header Facet';

EXAMPLE:

<!-- Shows a two column table of contacts associated with the account. 
The account column headers are controlled by the facets.-->

<apex:page standardController="Account">
 <apex:pageBlock title="Contacts">
 <apex:dataTable value="{!account.Contacts}" var="contact" cellPadding="4" border="1">
 <apex:column >
 <apex:facet name="header">Name</apex:facet>
 {!contact.Name}
 </apex:column>
 <apex:column >
 <apex:facet name="header">Phone</apex:facet>
 {!contact.Phone}
 </apex:column>
 </apex:dataTable>
 </apex:pageBlock>
</apex:page>
~|~
This Visualforce component places a Flash movie on a page, rendered with the HTML object and embed tags.

(#VISUALFORCE)`|`<apex:flash>

Places a Flash movie on a page, rendered with the HTML object and embed tags.

<apex:page sidebar="false" showheader="false">
 <apex:flash src="http://www.adobe.com/devnet/flash/samples/drawing_1/1_coordinates.swf" 
 height="300" width="100%" />
</apex:page>
~|~
What does this Visualforce component do?

<apex:flash>

(#VISUALFORCE)`|`<apex:flash>

Places a Flash movie on a page, rendered with the HTML object and embed tags.

<apex:page sidebar="false" showheader="false">
 <apex:flash src="http://www.adobe.com/devnet/flash/samples/drawing_1/1_coordinates.swf" 
 height="300" width="100%" />
</apex:page>
~|~
This Visualforce component defines a section of a Visualforce page that allows users to enter input and then submit it with an <apex:commandButton> or <apex:commandLink>.

(#VISUALFORCE)`|`<apex:form>

Defines a section of a Visualforce page that allows users to enter input and then submit it with an <apex:commandButton> or <apex:commandLink>.

IMPORTANT!

◊ The body of the form determines the data that is displayed and the way it is processed. 

◊ It's a best practice to verify that pages and custom components use at most one <apex:form> tag.

◊ As of API version 18.0, this tag can't be a child component of <apex:repeat>.
~|~
What does this Visualforce component do?

<apex:form>

(#VISUALFORCE)`|`<apex:form>

Defines a section of a Visualforce page that allows users to enter input and then submit it with an <apex:commandButton> or <apex:commandLink>.

IMPORTANT!

◊ The body of the form determines the data that is displayed and the way it is processed. 

◊ It's a best practice to verify that pages and custom components use at most one <apex:form> tag.

◊ As of API version 18.0, this tag can't be a child component of <apex:repeat>.
~|~
This attribute of the <apex:form> component takes a comma-separated list of content types that a server processing this form can handle.

(#VISUALFORCE)`|`The "accept" attribute of <apex:form> 

DESCRIPTION:

◊ A comma-separated list of content types that a server processing this form can handle.

◊ Possible values for this attribute include "text/html", "image/png", "image/gif", "video/mpeg", "text/css", and "audio/basic". 

◊ For more information, including a complete list of possible values, see the W3C specifications.
~|~
What does the "accept" attribute of the <apex:form> component do? 

Is it required? 

What kind of information does it expect?

(#VISUALFORCE)`|`The "accept" attribute of <apex:form> 

DESCRIPTION:

◊ A comma-separated list of content types that a server processing this form can handle.

◊ Possible values for this attribute include "text/html", "image/png", "image/gif", "video/mpeg", "text/css", and "audio/basic". 

◊ For more information, including a complete list of possible values, see the W3C specifications.
~|~
This attribute of the <apex:form> component takes a comma-separated list of character encodings that a server processing this form can handle.

(#VISUALFORCE)`|`The "acceptcharset" attribute of <apex:form>

DESCRIPTION:

◊ A comma-separated list of character encodings that a server processing this form can handle.

◊ If not specified, this value defaults to "UNKNOWN".
~|~
What does the "acceptcharset" attribute of the <apex:form> component do? 

Is it required? 

What kind of information does it expect?

(#VISUALFORCE)`|`The "acceptcharset" attribute of <apex:form>

DESCRIPTION:

◊ A comma-separated list of character encodings that a server processing this form can handle.

◊ If not specified, this value defaults to "UNKNOWN".
~|~
This attribute, common to many Visualforce components, takes a String that specifies the direction in which the generated HTML component should be read.

(#VISUALFORCE)`|`The "dir" attribute.

DESCRIPTION:

◊ A String that specifies the direction in which the generated HTML component should be read.

◊ Possible values include "RTL" (right to left) or "LTR" (left to right).
~|~
What does the "dir" attribute, common to many Visualforce components, actually do?

Is it usually required?

What kind of information does it typically expect?

(#VISUALFORCE)`|`The "dir" attribute.

DESCRIPTION:

◊ A String that specifies the direction in which the generated HTML component should be read.

◊ Possible values include "RTL" (right to left) or "LTR" (left to right).
~|~
This attribute of the <apex:form> component takes a String that specifies the content type used to submit the form to the server..

(#VISUALFORCE)`|`The "enctype" attribute of <apex:form>

DESCRIPTION:

◊ A String that specifies the content type used to submit the form to the server.

◊ If not specified, this value defaults to "application/x-www-form-urlencoded".
~|~
What does the "enctype" attribute of the <apex:form> component do? 

Is it required? 

What kind of information does it expect?

(#VISUALFORCE)`|`The "enctype" attribute of <apex:form>

DESCRIPTION:

◊ A String that specifies the content type used to submit the form to the server.

◊ If not specified, this value defaults to "application/x-www-form-urlencoded".
~|~
This attribute of the <apex:form> component takes a Boolean (default: "false") that specifies if the form will be submitted using SSL, regardless of whether the page itself was served with SSL.

(#VISUALFORCE)`|`The "forceSSL" attribute of <apex:form>

DESCRIPTION:

◊ Boolean (default: "false") that specifies if the form will be submitted using SSL, regardless of whether the page itself was served with SSL.

◊ If the value is false, the form will be submitted using the same protocol as the page.

◊ If forceSSL is set to true, when the form is submitted, the page returned will use SSL.
~|~
What does the "forceSSL" attribute of the <apex:form> component do? 

Is it required? 

What kind of information does it expect?

(#VISUALFORCE)`|`The "forceSSL" attribute of <apex:form>

DESCRIPTION:

◊ Boolean (default: "false") that specifies if the form will be submitted using SSL, regardless of whether the page itself was served with SSL.

◊ If the value is false, the form will be submitted using the same protocol as the page.

◊ If forceSSL is set to true, when the form is submitted, the page returned will use SSL.
~|~
This attribute, common to many Visualforce components, takes a String that specifies an identifier that allows the component to be referenced by other components in the page.

(#VISUALFORCE)`|`The "id" attribute.

DESCRIPTION:

◊ A String that specifies an identifier that allows the component to be referenced by other components in the page.
~|~
What does the "id" attribute, common to many Visualforce components, actually do?

Is it usually required?

What kind of information does it typically expect?

(#VISUALFORCE)`|`The "id" attribute.

DESCRIPTION:

◊ A String that specifies an identifier that allows the component to be referenced by other components in the page.
~|~
This attribute, common to many Visualforce components, takes a String that specifies the base language for the generated HTML output, for example, "en" or "en-US".

(#VISUALFORCE)`|`The "lang" attribute.

DESCRIPTION:

◊ A String that specifies the base language for the generated HTML output, for example, "en" or "en-US".

◊ For more information on this attribute, see the W3C specifications.
~|~
What does the "lang" attribute, common to many Visualforce components, actually do?

Is it usually required?

What kind of information does it typically expect?

(#VISUALFORCE)`|`The "lang" attribute.

DESCRIPTION:

◊ A String that specifies the base language for the generated HTML output, for example, "en" or "en-US".

◊ For more information on this attribute, see the W3C specifications.
~|~
This attribute, common to many Visualforce components, takes a String representing the the JavaScript invoked if the onclick event occurs--that is, if the user clicks the component.

(#VISUALFORCE)`|`The "onclick" attribute.

DESCRIPTION:

◊ A String representing the the JavaScript invoked if the onclick event occurs--that is, if the user clicks the component.
~|~
What does the "onclick" attribute, common to many Visualforce components, actually do?

Is it usually required?

What kind of information does it typically expect?

(#VISUALFORCE)`|`The "onclick" attribute.

DESCRIPTION:

◊ A String representing the the JavaScript invoked if the onclick event occurs--that is, if the user clicks the component.
~|~
This attribute, common to many Visualforce components, takes a String representing the JavaScript invoked if the ondblclick event occurs--that is, if the user clicks the component twice.

(#VISUALFORCE)`|`The "ondblclick" attribute.

DESCRIPTION:

◊ A String representing the JavaScript invoked if the ondblclick event occurs--that is, if the user clicks the component twice.
~|~
What does the "ondblclick" attribute, common to many Visualforce components, actually do?

Is it usually required?

What kind of information does it typically expect?

(#VISUALFORCE)`|`The "ondblclick" attribute.

DESCRIPTION:

◊ A String representing the JavaScript invoked if the ondblclick event occurs--that is, if the user clicks the component twice.
~|~
This attribute, common to many Visualforce components, takes a String that specifies the JavaScript invoked if the onkeydown event occurs--that is, if the user presses a keyboard key.

(#VISUALFORCE)`|`The "onkeydown" attribute.

DESCRIPTION:

◊ A String that specifies the JavaScript invoked if the onkeydown event occurs--that is, if the user presses a keyboard key.
~|~
What does the "onkeydown" attribute, common to many Visualforce components, actually do?

Is it usually required?

What kind of information does it typically expect?

(#VISUALFORCE)`|`The "onkeydown" attribute.

DESCRIPTION:

◊ A String that specifies the JavaScript invoked if the onkeydown event occurs--that is, if the user presses a keyboard key.
~|~
This attribute, common to many Visualforce components, takes a String that specifies the JavaScript invoked if the onkeypress event occurs--that is, if the user presses or holds down a keyboard key.

(#VISUALFORCE)`|`The "onkeypress" attribute.

DESCRIPTION:

◊ A String that specifies the JavaScript invoked if the onkeypress event occurs--that is, if the user presses or holds down a keyboard key.
~|~
What does the "onkeypress" attribute, common to many Visualforce components, actually do?

Is it usually required?

What kind of information does it typically expect?

(#VISUALFORCE)`|`The "onkeypress" attribute.

DESCRIPTION:

◊ A String that specifies the JavaScript invoked if the onkeypress event occurs--that is, if the user presses or holds down a keyboard key.
~|~
This attribute, common to many Visualforce components, takes a String that specifies the JavaScript invoked if the onkeyup event occurs--that is, if the user releases a keyboard key.

(#VISUALFORCE)`|`The "onkeyup" attribute.

DESCRIPTION:

◊ A String that specifies the JavaScript invoked if the onkeyup event occurs--that is, if the user releases a keyboard key.
~|~
What does the "onkeyup" attribute, common to many Visualforce components, actually do?

Is it usually required?

What kind of information does it typically expect?

(#VISUALFORCE)`|`The "onkeyup" attribute.

DESCRIPTION:

◊ A String that specifies the JavaScript invoked if the onkeyup event occurs--that is, if the user releases a keyboard key.
~|~
This attribute, common to many Visualforce components, takes a String that specifies the JavaScript invoked if the onmousedown event occurs--that is, if the user clicks a mouse button.

(#VISUALFORCE)`|`The "onmousedown" attribute.

DESCRIPTION:

◊ A String that specifies the JavaScript invoked if the onmousedown event occurs--that is, if the user clicks a mouse button.
~|~
What does the "onmousedown" attribute, common to many Visualforce components, actually do?

Is it usually required?

What kind of information does it typically expect?

(#VISUALFORCE)`|`The "onmousedown" attribute.

DESCRIPTION:

◊ A String that specifies the JavaScript invoked if the onmousedown event occurs--that is, if the user clicks a mouse button.
~|~
This attribute, common to many Visualforce components, takes a String that specifies the JavaScript invoked if the onmousemove event occurs--that is, if the user moves the mouse pointer.

(#VISUALFORCE)`|`The "onmousemove" attribute.

DESCRIPTION:

◊ A String that specifies the JavaScript invoked if the onmousemove event occurs--that is, if the user moves the mouse pointer.
~|~
What does the "onmousemove" attribute, common to many Visualforce components, actually do?

Is it usually required?

What kind of information does it typically expect?

(#VISUALFORCE)`|`The "onmousemove" attribute.

DESCRIPTION:

◊ A String that specifies the JavaScript invoked if the onmousemove event occurs--that is, if the user moves the mouse pointer.
~|~
This attribute, common to many Visualforce components, takes a String that specifies the JavaScript invoked if the onmouseout event occurs--that is, if the user moves the mouse pointer away from the control.

(#VISUALFORCE)`|`The "onmouseout" attribute.

DESCRIPTION:

◊ A String that specifies the JavaScript invoked if the onmouseout event occurs--that is, if the user moves the mouse pointer away from the control.
~|~
What does the "onmouseout" attribute, common to many Visualforce components, actually do?

Is it usually required?

What kind of information does it typically expect?

(#VISUALFORCE)`|`The "onmouseout" attribute.

DESCRIPTION:

◊ A String that specifies the JavaScript invoked if the onmouseout event occurs--that is, if the user moves the mouse pointer away from the control.
~|~
This attribute, common to many Visualforce components, takes a String that specifies the JavaScript invoked if the onmouseover event occurs--that is, if the user moves the mouse pointer over the control.

(#VISUALFORCE)`|`The "onmouseover" attribute.

DESCRIPTION:

◊ A String that specifies the JavaScript invoked if the onmouseover event occurs--that is, if the user moves the mouse pointer over the control.
~|~
What does the "onmouseover" attribute, common to many Visualforce components, actually do?

Is it usually required?

What kind of information does it typically expect?

(#VISUALFORCE)`|`The "onmouseover" attribute.

DESCRIPTION:

◊ A String that specifies the JavaScript invoked if the onmouseover event occurs--that is, if the user moves the mouse pointer over the control.
~|~
This attribute, common to many Visualforce components, takes a String that specifies the JavaScript invoked if the onmouseup event occurs--that is, if the user releases the mouse button.

(#VISUALFORCE)`|`The "onmouseup" attribute.

DESCRIPTION:

◊ A String that specifies the JavaScript invoked if the onmouseup event occurs--that is, if the user releases the mouse button.
~|~
What does the "onmouseup" attribute, common to many Visualforce components, actually do?

Is it usually required?

What kind of information does it typically expect?

(#VISUALFORCE)`|`The "onmouseup" attribute.

DESCRIPTION:

◊ A String that specifies the JavaScript invoked if the onmouseup event occurs--that is, if the user releases the mouse button.
~|~
This attribute of the <apex:form> component takes a String that specifies the JavaScript invoked if the onreset event occurs--that is, if the user clicks the reset button on the form.

(#VISUALFORCE)`|`The "onreset" attribute of <apex:form>

DESCRIPTION:

◊ A String that specifies the JavaScript invoked if the onreset event occurs--that is, if the user clicks the reset button on the form.
~|~
What does the "onreset" attribute of the <apex:form> component do?

Is it required?

What kind of information does it expect?

(#VISUALFORCE)`|`The "onreset" attribute of <apex:form>

DESCRIPTION:

◊ A String that specifies the JavaScript invoked if the onreset event occurs--that is, if the user clicks the reset button on the form.
~|~
This attribute of the <apex:form> component takes a String that specifies the JavaScript invoked if the onsubmit event occurs--that is, if the user clicks the submit button on the form.

(#VISUALFORCE)`|`The "onsubmit" attribute of <apex:form>

DESCRIPTION:

◊ A String that specifies the JavaScript invoked if the onsubmit event occurs--that is, if the user clicks the submit button on the form.
~|~
What does the "onsubmit" attribute of the <apex:form> component do?

Is it required?

What kind of information does it expect?

(#VISUALFORCE)`|`The "onsubmit" attribute of <apex:form>

DESCRIPTION:

◊ A String that specifies the JavaScript invoked if the onsubmit event occurs--that is, if the user clicks the submit button on the form.
~|~
This attribute, common to many Visualforce components, takes a Boolean value that specifies whether or not this component should prepend its ID to the IDs of its child components during the clientID generation process.

(#VISUALFORCE)`|`The "prependID" attribute.

DESCRIPTION:

◊ A Boolean value that specifies whether or not this component should prepend its ID to the IDs of its child components during the clientID generation process.

◊ If not specified, the value defaults to true.
~|~
What does the "prependID" attribute, common to many Visualforce components, actually do?

Is it usually required?

What kind of information does it typically expect?

(#VISUALFORCE)`|`The "prependID" attribute.

DESCRIPTION:

◊ A Boolean value that specifies whether or not this component should prepend its ID to the IDs of its child components during the clientID generation process.

◊ If not specified, the value defaults to true.
~|~
This attribute, common to many Visualforce components, takes a Boolean value that specifies whether the component is rendered on the page.

(#VISUALFORCE)`|`The "rendered" attribute.

DESCRIPTION:

◊ A Boolean value that specifies whether the component is rendered on the page.

◊ If not specified, this value defaults to true.
~|~
What does the "rendered" attribute, common to many Visualforce components, actually do?

Is it usually required?

What kind of information does it typically expect?

(#VISUALFORCE)`|`The "rendered" attribute.

DESCRIPTION:

◊ A Boolean value that specifies whether the component is rendered on the page.

◊ If not specified, this value defaults to true.
~|~
This attribute, common to many Visualforce components, takes a String that specifies the style used to display the component, used primarily for adding inline CSS styles.

(#VISUALFORCE)`|`The "style" attribute.

DESCRIPTION:

◊ A String that specifies the style used to display the component, used primarily for adding inline CSS styles.
~|~
What does the "style" attribute, common to many Visualforce components, actually do?

Is it usually required?

What kind of information does it typically expect?

(#VISUALFORCE)`|`The "style" attribute.

DESCRIPTION:

◊ A String that specifies the style used to display the component, used primarily for adding inline CSS styles.
~|~
This attribute, common to many Visualforce components, takes a String that specifies the style class used to display the component, and is used primarily to designate which CSS styles are applied when using an external CSS stylesheet.

(#VISUALFORCE)`|`The "styleClass" attribute.

DESCRIPTION:

◊ A String that specifies the style class used to display the component. Used primarily to designate which CSS styles are applied when using an external CSS stylesheet.
~|~
What does the "styleClass" attribute, common to many Visualforce components, actually do? 

Is it usually required? 

What kind of information does it typically expect?

(#VISUALFORCE)`|`The "styleClass" attribute.

DESCRIPTION:

◊ A String that specifies the style class used to display the component. Used primarily to designate which CSS styles are applied when using an external CSS stylesheet.
~|~
This attribute, common to many Visualforce components, takes a String that specifies the name of the frame that displays the response after certain actions are performed, eg. form submission, and command execution.

(#VISUALFORCE)`|`The "target" attribute.

DESCRIPTION:

◊ A String that specifies the name of the frame that displays the response after certain actions are performed, eg. form submission, and command execution.

◊ Possible values for this attribute include "_blank", "_parent", "_self", and "_top".

◊ You can also specify your own target names by assigning a value to the name attribute of a desired destination.
~|~
What does the "target" attribute, common to many Visualforce components, actually do?

Is it usually required?

What kind of information does it typically expect?

(#VISUALFORCE)`|`The "target" attribute.

DESCRIPTION:

◊ A String that specifies the name of the frame that displays the response after certain actions are performed, eg. form submission, and command execution.

◊ Possible values for this attribute include "_blank", "_parent", "_self", and "_top".

◊ You can also specify your own target names by assigning a value to the name attribute of a desired destination.
~|~
This attribute, common to many Visualforce components, takes a String that specifies the text to display as a tooltip when the user's mouse pointer hovers over this component.

(#VISUALFORCE)`|`The "title" attribute.

DESCRIPTION:

◊ A String that specifies the text to display as a tooltip when the user's mouse pointer hovers over this component.
~|~
What does the "title" attribute, common to many Visualforce components, actually do?

Is it usually required?

What kind of information does it typically expect?

(#VISUALFORCE)`|`The "title" attribute.

DESCRIPTION:

◊ A String that specifies the text to display as a tooltip when the user's mouse pointer hovers over this component.
~|~
This Visualforce component defines a data series that, when rendered in a Visualforce chart, shows progress along a specific metric. 

(#VISUALFORCE)`|`<apex:gaugeSeries>

Defines a data series that, when rendered in a Visualforce chart, shows progress along a specific metric. 

At a minimum you must specify the fields in the data collection to use as label and value pair for the gauge level to be shown. 

The readability of a gauge chart benefits when you specify meaningful values for the minimum and maximum along the associated <apex:axis>, which must be of type "gauge".

Note: This component must be enclosed within an <apex:chart> component. You should put only one <apex:gaugeSeries> in a chart.

EXAMPLE
 
<apex:chart height="250" width="450" animate="true" legend="true" data="{!data}">
 <apex:axis type="gauge" position="left" margin="-10" 
 minimum="0" maximum="100" steps="10"/>
 <apex:gaugeSeries dataField="data1" highlight="true" tips="true" donut="25" 
 colorSet="#F49D10, #ddd">
 <apex:chartLabel display="over"/>
 </apex:gaugeSeries>
</apex:chart>
~|~
What does this Visualforce component do?

<apex:gaugeSeries>

(#VISUALFORCE)`|`<apex:gaugeSeries>

Defines a data series that, when rendered in a Visualforce chart, shows progress along a specific metric. 

At a minimum you must specify the fields in the data collection to use as label and value pair for the gauge level to be shown. 

The readability of a gauge chart benefits when you specify meaningful values for the minimum and maximum along the associated <apex:axis>, which must be of type "gauge".

Note: This component must be enclosed within an <apex:chart> component. You should put only one <apex:gaugeSeries> in a chart.

EXAMPLE
 
<apex:chart height="250" width="450" animate="true" legend="true" data="{!data}">
 <apex:axis type="gauge" position="left" margin="-10" 
 minimum="0" maximum="100" steps="10"/>
 <apex:gaugeSeries dataField="data1" highlight="true" tips="true" donut="25" 
 colorSet="#F49D10, #ddd">
 <apex:chartLabel display="over"/>
 </apex:gaugeSeries>
</apex:chart>
~|~
This Visualforce component creates an inline frame (IFRAME) within a Visualforce page. 

(#VISUALFORCE)`|`<apex:iframe>

A component that creates an inline frame (IFRAME) within a Visualforce page. 

A frame allows you to keep some information visible while other information is scrolled or replaced.

EXAMPLE

<apex:iframe src="http://www.salesforce.com" scrolling="true" id="theIframe"/>

The example above renders the following HTML:

<iframe height="600px" id="theIframe" name="theIframe" src="http://www.salesforce.com" width="100%"></iframe>
~|~
What does this Visualforce component do?

<apex:iframe>

(#VISUALFORCE)`|`<apex:iframe>

A component that creates an inline frame (IFRAME) within a Visualforce page. 

A frame allows you to keep some information visible while other information is scrolled or replaced.

EXAMPLE

<apex:iframe src="http://www.salesforce.com" scrolling="true" id="theIframe"/>

The example above renders the following HTML:

<iframe height="600px" id="theIframe" name="theIframe" src="http://www.salesforce.com" width="100%"></iframe>
~|~
This Visualforce component creates a graphic image on the page, rendered with the HTML <img> tag.

(#VISUALFORCE)`|`<apex:image>

Creates a graphic image on the page, rendered with the HTML <img> tag.

EXAMPLE

<apex:image id="theImage" value="/img/myimage.gif" width="220" height="55"/>

The example above renders the following HTML:

<img id="theImage" src="/img/myimage.gif" width="220" height="55"/> 

RESOURCE EXAMPLE

<apex:image id="theImage" value="{!$Resource.myResourceImage}" width="200" height="200"/>

The example above renders the following HTML:

<img id="theImage" src="<generatedId>/myResourceImage" width="200" height="200"/>

ZIP RESOURCE EXAMPLE

<apex:image url="{!URLFOR($Resource.TestZip, 'images/Bluehills.jpg')}" width="50" height="50" />

The example above renders the following HTML:

<id="theImage" src="[generatedId]/images/Bluehills.jpg" width="50" height="50"/>
~|~
What does this Visualforce component do?

<apex:image>

(#VISUALFORCE)`|`<apex:image>

Creates a graphic image on the page, rendered with the HTML <img> tag.

EXAMPLE

<apex:image id="theImage" value="/img/myimage.gif" width="220" height="55"/>

The example above renders the following HTML:

<img id="theImage" src="/img/myimage.gif" width="220" height="55"/> 

RESOURCE EXAMPLE

<apex:image id="theImage" value="{!$Resource.myResourceImage}" width="200" height="200"/>

The example above renders the following HTML:

<img id="theImage" src="<generatedId>/myResourceImage" width="200" height="200"/>

ZIP RESOURCE EXAMPLE

<apex:image url="{!URLFOR($Resource.TestZip, 'images/Bluehills.jpg')}" width="50" height="50" />

The example above renders the following HTML:

<id="theImage" src="[generatedId]/images/Bluehills.jpg" width="50" height="50"/>
~|~
This Visualforce component inserts a second Visualforce page into the current page. The entire page subtree is injected into the Visualforce DOM at the point of reference and the scope of the included page is maintained.

(#VISUALFORCE)`|`<apex:include>

A component that inserts a second Visualforce page into the current page. 

◊ The entire page subtree is injected into the Visualforce DOM at the point of reference and the scope of the included page is maintained.

◊ If content should be stripped from the included page, use the <apex:composition> component instead.

EXAMPLE

<!-- Page: -->
<apex:page id="thePage">
 <apex:outputText value="(page) This is the page."/><br/>
 <apex:include pageName="include"/>
</apex:page>
 
<!-- Page: include -->
<apex:page id="theIncludedPage">
 <apex:outputText value="(include) This is text from another page."/>
</apex:page>

The example above renders the following HTML:

(page) This is the page.<br/>
<span id="thePage:include">(include) This is text from another page.</span>
~|~
What does this Visualforce component do?

<apex:include>

(#VISUALFORCE)`|`<apex:include>

A component that inserts a second Visualforce page into the current page. 

◊ The entire page subtree is injected into the Visualforce DOM at the point of reference and the scope of the included page is maintained.

◊ If content should be stripped from the included page, use the <apex:composition> component instead.

EXAMPLE

<!-- Page: -->
<apex:page id="thePage">
 <apex:outputText value="(page) This is the page."/><br/>
 <apex:include pageName="include"/>
</apex:page>
 
<!-- Page: include -->
<apex:page id="theIncludedPage">
 <apex:outputText value="(include) This is text from another page."/>
</apex:page>

The example above renders the following HTML:

(page) This is the page.<br/>
<span id="thePage:include">(include) This is text from another page.</span>
~|~
This Visualforce component creates a link to a JavaScript library that can be used in the Visualforce page. 

(#VISUALFORCE)`|`<apex:includeScript>

Creates a link to a JavaScript library that can be used in the Visualforce page. 

When specified, this component injects a script reference into the head element of the generated HTML page.

IMPORTANT!

◊ For performance reasons, you may simply want to use a JavaScript tag before your closing <apex:page> tag, rather than this component.

EXAMPLE

<apex:includeScript value="{!$Resource.example_js}"/>

The example above renders the following HTML:

<script type='text/javascript' src='/resource/1233160164000/example_js'>
~|~
What does this Visualforce component do?

<apex:includeScript>

(#VISUALFORCE)`|`<apex:includeScript>

Creates a link to a JavaScript library that can be used in the Visualforce page. 

When specified, this component injects a script reference into the head element of the generated HTML page.

IMPORTANT!

◊ For performance reasons, you may simply want to use a JavaScript tag before your closing <apex:page> tag, rather than this component.

EXAMPLE

<apex:includeScript value="{!$Resource.example_js}"/>

The example above renders the following HTML:

<script type='text/javascript' src='/resource/1233160164000/example_js'>
~|~
This Visualforce component provides inline editing support to <apex:outputField> and various container components.

(#VISUALFORCE)`|`<apex:inlineEditSupport>

This component provides inline editing support to <apex:outputField> and various container components. 

IMPORTANT!

◊ In order to support inline editing, this component must also be within an <apex:form> tag.

◊ The <apex:inlineEditSupport> component can only be a descendant of the following tags:

<apex:dataList>
<apex:dataTable>
<apex:form>
<apex:outputField>
<apex:pageBlock>
<apex:pageBlockSection>
<apex:pageBlockTable>
<apex:repeat>

See also: the inlineEdit attribute of <apex:detail>
~|~
What does this Visualforce component do?

<apex:inlineEditSupport>

(#VISUALFORCE)`|`<apex:inlineEditSupport>

This component provides inline editing support to <apex:outputField> and various container components. 

IMPORTANT!

◊ In order to support inline editing, this component must also be within an <apex:form> tag.

◊ The <apex:inlineEditSupport> component can only be a descendant of the following tags:

<apex:dataList>
<apex:dataTable>
<apex:form>
<apex:outputField>
<apex:pageBlock>
<apex:pageBlockSection>
<apex:pageBlockTable>
<apex:repeat>

See also: the inlineEdit attribute of <apex:detail>
~|~
This Visualforce component creates an HTML input element of type checkbox. 

(#VISUALFORCE)`|`<apex:inputCheckbox>

Creates an HTML input element of type checkbox. 

Use this component to get user input for a controller method that does not correspond to a field on a Salesforce object.
~|~
What does this Visualforce component do?

<apex:inputCheckbox>

(#VISUALFORCE)`|`<apex:inputCheckbox>

Creates an HTML input element of type checkbox. 

Use this component to get user input for a controller method that does not correspond to a field on a Salesforce object.
~|~
This Visualforce component creates an HTML input element for a value that corresponds to a field on a Salesforce object. 

(#VISUALFORCE)`|`<apex:inputField>

Creates an HTML input element for a value that corresponds to a field on a Salesforce object. 

The <apex:inputField> component respects the attributes of the associated field, including whether the field is required or unique, and the user interface widget to display to get input from the user. 

For example, if the specified <apex:inputField> component is a date field, a calendar input widget is displayed. When used in an <apex:pageBlockSection>, <apex:inputField> tags always display with their corresponding output label.

Note that if custom help is defined for the field in Setup, the field must be a child of an <apex:pageBlock> or <apex:pageBlockSectionItem>, and the Salesforce page header must be displayed for the custom help to appear on your Visualforce page. To override the display of custom help, use the <apex:inputField> in the body of an <apex:pageBlockSectionItem>.

IMPORTANT! 

Consider the following when using DOM events with this tag:

◊ For lookup fields, mouse events fire on both the text box and graphic icon

◊ For multi-select picklists, all events fire, but the DOM ID is suffixed with _unselected for the left box, _selected for the right box, and _right_arrow and _left_arrow for the graphic icons

◊ For rich text areas, no events fire.

Beginning with API version 20.0, an inputField matched to a field with a default value has the default value prepopulated on the Visualforce page.

Note: Read-only fields, and fields for certain Salesforce objects with complex automatic behavior such as Event.StartDateTime and Event.EndDateTime, don't render as editable when using <apex:inputField>. Use a different input component such as <apex:inputText> instead.
~|~
What does this Visualforce component do?

<apex:inputField>

(#VISUALFORCE)`|`<apex:inputField>

Creates an HTML input element for a value that corresponds to a field on a Salesforce object. 

The <apex:inputField> component respects the attributes of the associated field, including whether the field is required or unique, and the user interface widget to display to get input from the user. 

For example, if the specified <apex:inputField> component is a date field, a calendar input widget is displayed. When used in an <apex:pageBlockSection>, <apex:inputField> tags always display with their corresponding output label.

Note that if custom help is defined for the field in Setup, the field must be a child of an <apex:pageBlock> or <apex:pageBlockSectionItem>, and the Salesforce page header must be displayed for the custom help to appear on your Visualforce page. To override the display of custom help, use the <apex:inputField> in the body of an <apex:pageBlockSectionItem>.

IMPORTANT! 

Consider the following when using DOM events with this tag:

◊ For lookup fields, mouse events fire on both the text box and graphic icon

◊ For multi-select picklists, all events fire, but the DOM ID is suffixed with _unselected for the left box, _selected for the right box, and _right_arrow and _left_arrow for the graphic icons

◊ For rich text areas, no events fire.

Beginning with API version 20.0, an inputField matched to a field with a default value has the default value prepopulated on the Visualforce page.

Note: Read-only fields, and fields for certain Salesforce objects with complex automatic behavior such as Event.StartDateTime and Event.EndDateTime, don't render as editable when using <apex:inputField>. Use a different input component such as <apex:inputText> instead.
~|~
This Visualforce component creates an input field to upload a file.

(#VISUALFORCE)`|`<apex:inputFile>

A component that creates an input field to upload a file.

Note: The maximum file size that can be uploaded via Visualforce is 10 MB.

EXAMPLE

<!-- Upload a file and put it in your personal documents folder-->

<!-- Page: -->
<apex:page standardController="Document" extensions="documentExt">
 <apex:messages />
 <apex:form id="theForm">
 <apex:pageBlock>
 <apex:pageBlockSection>
 <apex:inputFile value="{!document.body}" filename="{!document.name}"/>
 <apex:commandButton value="Save" action="{!save}"/>
 </apex:pageBlockSection>
 </apex:pageBlock>
 </apex:form>
</apex:page>


/*** Controller ***/
public class documentExt {
 public documentExt(ApexPages.StandardController controller) {
 Document d = (Document) controller.getRecord();
 d.folderid = UserInfo.getUserId(); //this puts it in My Personal Documents
 }
}
~|~
What does this Visualforce component do?

<apex:inputFile>

(#VISUALFORCE)`|`<apex:inputFile>

A component that creates an input field to upload a file.

Note: The maximum file size that can be uploaded via Visualforce is 10 MB.

EXAMPLE

<!-- Upload a file and put it in your personal documents folder-->

<!-- Page: -->
<apex:page standardController="Document" extensions="documentExt">
 <apex:messages />
 <apex:form id="theForm">
 <apex:pageBlock>
 <apex:pageBlockSection>
 <apex:inputFile value="{!document.body}" filename="{!document.name}"/>
 <apex:commandButton value="Save" action="{!save}"/>
 </apex:pageBlockSection>
 </apex:pageBlock>
 </apex:form>
</apex:page>


/*** Controller ***/
public class documentExt {
 public documentExt(ApexPages.StandardController controller) {
 Document d = (Document) controller.getRecord();
 d.folderid = UserInfo.getUserId(); //this puts it in My Personal Documents
 }
}
~|~
This Visualforce component creates an HTML input element of type hidden, that is, an input element that is invisible to the user.

(#VISUALFORCE)`|`<apex:inputHidden>

Creates an HTML input element of type hidden, that is, an input element that is invisible to the user.

Use this component to pass variables from page to page.

EXAMPLE

<apex:inputHidden value="{!inputValue}" id="theHiddenInput"/>

The example above renders the following HTML:

<input id="theHiddenInput" type="hidden" name="theHiddenInput" />
~|~
What does this Visualforce component do?

<apex:inputHidden>

(#VISUALFORCE)`|`<apex:inputHidden>

Creates an HTML input element of type hidden, that is, an input element that is invisible to the user.

Use this component to pass variables from page to page.

EXAMPLE

<apex:inputHidden value="{!inputValue}" id="theHiddenInput"/>

The example above renders the following HTML:

<input id="theHiddenInput" type="hidden" name="theHiddenInput" />
~|~
This Visualforce component creates an HTML input element of type password. 

(#VISUALFORCE)`|`<apex:inputSecret>

Creates an HTML input element of type password. 

Use this component to get user input for a controller method that does not correspond to a field on a Salesforce object, for a value that is masked as the user types.

EXAMPLE

<apex:inputSecret value="{!inputValue}" id="theSecretInput"/>

The example above renders the following HTML:

<input id="theSecretInput" type="password" name="theSecretInput" value="" />
~|~
What does this Visualforce component do?

<apex:inputSecret>

(#VISUALFORCE)`|`<apex:inputSecret>

Creates an HTML input element of type password. 

Use this component to get user input for a controller method that does not correspond to a field on a Salesforce object, for a value that is masked as the user types.

EXAMPLE

<apex:inputSecret value="{!inputValue}" id="theSecretInput"/>

The example above renders the following HTML:

<input id="theSecretInput" type="password" name="theSecretInput" value="" />
~|~
This Visualforce component creates an HTML input element of type text.

(#VISUALFORCE)`|`<apex:inputText>

Creates an HTML input element of type text. 

Use this component to get user input for a controller method that does not correspond to a field on a Salesforce object.

IMPORTANT!

◊ This component does not use Salesforce styling. Also, since it does not correspond to a field, or any other data on an object, custom code is required to use the value the user inputs.

EXAMPLE

<apex:inputText value="{!inputValue}" id="theTextInput"/>

The example above renders the following HTML:

<input id="theTextInput" type="text" name="theTextInput" />
~|~
What does this Visualforce component do?

<apex:inputText>

(#VISUALFORCE)`|`<apex:inputText>

Creates an HTML input element of type text. 

Use this component to get user input for a controller method that does not correspond to a field on a Salesforce object.

IMPORTANT!

◊ This component does not use Salesforce styling. Also, since it does not correspond to a field, or any other data on an object, custom code is required to use the value the user inputs.

EXAMPLE

<apex:inputText value="{!inputValue}" id="theTextInput"/>

The example above renders the following HTML:

<input id="theTextInput" type="text" name="theTextInput" />
~|~
This Visualforce component creates an HTML text area input element. 

(#VISUALFORCE)`|`<apex:inputTextarea>

Creates an HTML text area input element. 

Use this component to get user input for a controller method that does not correspond to a field on a Salesforce object, for a value that requires a text area.

EXAMPLE

<apex:page standardController="Contract">
 <apex:form id="changeDescription">
 <apex:pageBlock>
 <p>Current description: {!contract.description}</p>
 <p>Change description to:</p> 
 <apex:inputTextarea id="newDesc" value="{!contract.description}"/><p/>
 <apex:commandButton value="Save" action="{!save}"/>
 </apex:pageBlock>
 </apex:form>
</apex:page>

The example above renders the following HTML:

<!-- changes the value of {!contract.description} on save -->

<form id="j_id0:changeDescription" name="j_id0:changeDescription" method="post" action="/apex/sandbox" enctype="application/x-www-form-urlencoded">
 <input type="hidden" name="j_id0:changeDescription" value="j_id0:changeDescription" />
 <!-- opening div tags -->
 <p>Current description: To facilitate better deals</p>
 <p>Change description to:</p>
 <textarea id="j_id0:changeDescription:j_id1:newDesc" name="j_id0:changeDescription:j_id1:newDesc"/>
 <input type="submit" name="j_id0:changeDescription:j_id1:j_id4" value="Save" class="btn" />
 <!-- closing div tags -->
</form>
~|~
What does this Visualforce component do?

<apex:inputTextarea>

(#VISUALFORCE)`|`<apex:inputTextarea>

Creates an HTML text area input element. 

Use this component to get user input for a controller method that does not correspond to a field on a Salesforce object, for a value that requires a text area.

EXAMPLE

<apex:page standardController="Contract">
 <apex:form id="changeDescription">
 <apex:pageBlock>
 <p>Current description: {!contract.description}</p>
 <p>Change description to:</p> 
 <apex:inputTextarea id="newDesc" value="{!contract.description}"/><p/>
 <apex:commandButton value="Save" action="{!save}"/>
 </apex:pageBlock>
 </apex:form>
</apex:page>

The example above renders the following HTML:

<!-- changes the value of {!contract.description} on save -->

<form id="j_id0:changeDescription" name="j_id0:changeDescription" method="post" action="/apex/sandbox" enctype="application/x-www-form-urlencoded">
 <input type="hidden" name="j_id0:changeDescription" value="j_id0:changeDescription" />
 <!-- opening div tags -->
 <p>Current description: To facilitate better deals</p>
 <p>Change description to:</p>
 <textarea id="j_id0:changeDescription:j_id1:newDesc" name="j_id0:changeDescription:j_id1:newDesc"/>
 <input type="submit" name="j_id0:changeDescription:j_id1:j_id4" value="Save" class="btn" />
 <!-- closing div tags -->
</form>
~|~
True or False?

Any standard or custom object field can be rendered as an editable field in a Visualforce page by using the <apex:inputField> component.

(#VISUALFORCE)`|`False.

Read-only fields, and fields for certain Salesforce objects with complex automatic behavior such as Event.StartDateTime and Event.EndDateTime, don't render as editable when using <apex:inputField>. 

For these fields, you should use a different input component such as <apex:inputText> instead.
~|~
This Visualforce template component declares a named area that must be defined by an <apex:define> component in another Visualforce page.

(#VISUALFORCE)`|`<apex:insert>

A template component that declares a named area that must be defined by an <apex:define> component in another Visualforce page. 

Use this component with the <apex:composition> and <apex:define> components to share data between multiple pages.

EXAMPLE

<!-- Page: composition -->

<!-- This page acts as the template. Create it first, then the page below. --> 
<apex:page>
 <apex:outputText value="(template) This is before the header"/><br/>
 <apex:insert name="header"/><br/>
 <apex:outputText value="(template) This is between the header and body"/><br/>
 <apex:insert name="body"/>
</apex:page>

<!-- Page: page -->
<apex:page>
 <apex:composition template="composition">
 <apex:define name="header">(page) This is the header of mypage</apex:define>
 <apex:define name="body">(page) This is the body of mypage</apex:define>
 </apex:composition>
</apex:page>

The example above renders the following HTML:

(template) This is before the header<br/>
(page) This is the header of mypage<br/>
(template) This is between the header and body<br/>
(page) This is the body of mypage
~|~
What does this Visualforce component do?

<apex:insert>

(#VISUALFORCE)`|`<apex:insert>

A template component that declares a named area that must be defined by an <apex:define> component in another Visualforce page. 

Use this component with the <apex:composition> and <apex:define> components to share data between multiple pages.

EXAMPLE

<!-- Page: composition -->

<!-- This page acts as the template. Create it first, then the page below. --> 
<apex:page>
 <apex:outputText value="(template) This is before the header"/><br/>
 <apex:insert name="header"/><br/>
 <apex:outputText value="(template) This is between the header and body"/><br/>
 <apex:insert name="body"/>
</apex:page>

<!-- Page: page -->
<apex:page>
 <apex:composition template="composition">
 <apex:define name="header">(page) This is the header of mypage</apex:define>
 <apex:define name="body">(page) This is the body of mypage</apex:define>
 </apex:composition>
</apex:page>

The example above renders the following HTML:

(template) This is before the header<br/>
(page) This is the header of mypage<br/>
(template) This is between the header and body<br/>
(page) This is the body of mypage
~|~
This Visualforce component defines a legend for use by a Visualforce chart.

(#VISUALFORCE)`|`<apex:legend>

Defines a legend for use by a Visualforce chart.

This component offers additional configuration options beyond the defaults used by the legend attribute of the <apex:chart> component.

IMPORTANT!

◊ This component must be enclosed within an <apex:chart> component.

EXAMPLE

<apex:chart height="400" width="700" data="{!data}">
 <apex:legend position="right"/>
 <apex:axis type="Numeric" position="left" fields="data1,data2"
 title="Opportunities Closed" grid="true"/>
 <apex:axis type="Category" position="bottom" fields="name"
 title="Month of the Year"/>
 <apex:lineSeries title="Closed-Won" axis="left" xField="name" yField="data1"/>
 <apex:lineSeries title="Closed-Lost" axis="left" xField="name" yField="data2"/>
</apex:chart>
~|~
What does this Visualforce component do?

<apex:legend>

(#VISUALFORCE)`|`<apex:legend>

Defines a legend for use by a Visualforce chart.

This component offers additional configuration options beyond the defaults used by the legend attribute of the <apex:chart> component.

IMPORTANT!

◊ This component must be enclosed within an <apex:chart> component.

EXAMPLE

<apex:chart height="400" width="700" data="{!data}">
 <apex:legend position="right"/>
 <apex:axis type="Numeric" position="left" fields="data1,data2"
 title="Opportunities Closed" grid="true"/>
 <apex:axis type="Category" position="bottom" fields="name"
 title="Month of the Year"/>
 <apex:lineSeries title="Closed-Won" axis="left" xField="name" yField="data1"/>
 <apex:lineSeries title="Closed-Lost" axis="left" xField="name" yField="data2"/>
</apex:chart>
~|~
This Visualforce component defines a data series to be rendered as connected points in a linear Visualforce chart. 

(#VISUALFORCE)`|`<apex:lineSeries>

Defines a data series to be rendered as connected points in a linear Visualforce chart. 

At a minimum you must specify the fields in the data collection to use as X and Y values for each point, as well as the X and Y axes to scale against.

IMPORTANT!

◊ This component must be enclosed within an <apex:chart> component. 

◊ You can have multiple <apex:barSeries> and <apex:lineSeries> components in a single chart. 

◊ You can also add <apex:areaSeries> and <apex:scatterSeries> components, but the results might not be very readable.

EXAMPLE

<apex:chart height="400" width="700" data="{!data}">
 <apex:axis type="Numeric" position="left" fields="data1,data2"
 title="Opportunities Closed" grid="true"/>
 <apex:axis type="Category" position="bottom" fields="name"
 title="Month of the Year"/>
 <apex:lineSeries title="Closed-Won" axis="left" xField="name" yField="data1"
 fill="true" markerType="cross" markerSize="4" markerFill="#FF0000"/>
 <apex:lineSeries title="Closed-Lost" axis="left" xField="name" yField="data2"
 markerType="circle" markerSize="4" markerFill="#8E35EF"/>
</apex:chart>
~|~
What does this Visualforce component do?

<apex:lineSeries>

(#VISUALFORCE)`|`<apex:lineSeries>

Defines a data series to be rendered as connected points in a linear Visualforce chart. 

At a minimum you must specify the fields in the data collection to use as X and Y values for each point, as well as the X and Y axes to scale against.

IMPORTANT!

◊ This component must be enclosed within an <apex:chart> component. 

◊ You can have multiple <apex:barSeries> and <apex:lineSeries> components in a single chart. 

◊ You can also add <apex:areaSeries> and <apex:scatterSeries> components, but the results might not be very readable.

EXAMPLE

<apex:chart height="400" width="700" data="{!data}">
 <apex:axis type="Numeric" position="left" fields="data1,data2"
 title="Opportunities Closed" grid="true"/>
 <apex:axis type="Category" position="bottom" fields="name"
 title="Month of the Year"/>
 <apex:lineSeries title="Closed-Won" axis="left" xField="name" yField="data1"
 fill="true" markerType="cross" markerSize="4" markerFill="#FF0000"/>
 <apex:lineSeries title="Closed-Lost" axis="left" xField="name" yField="data2"
 markerType="circle" markerSize="4" markerFill="#8E35EF"/>
</apex:chart>
~|~
This Visualforce component renders the standard list view picklist for an object, including its associated list of records for the currently selected view.

(#VISUALFORCE)`|`<apex:listViews>

Renders the list view picklist for an object, including its associated list of records for the currently selected view.

In standard Salesforce applications this component is displayed on the main tab for a particular object.

See also: <apex:enhancedList>.

<apex:page showHeader="true" tabstyle="Case">
 <apex:ListViews type="Case" />
 <apex:ListViews type="MyCustomObject__c" />
</apex:page>
~|~
What does this Visualforce component do?

<apex:listViews>

(#VISUALFORCE)`|`<apex:listViews>

Renders the list view picklist for an object, including its associated list of records for the currently selected view.

In standard Salesforce applications this component is displayed on the main tab for a particular object.

See also: <apex:enhancedList>.

<apex:page showHeader="true" tabstyle="Case">
 <apex:ListViews type="Case" />
 <apex:ListViews type="MyCustomObject__c" />
</apex:page>
~|~
This Visualforce component lets support agents who use Case Feed create logs for customer calls.

(#VISUALFORCE)`|`<apex:logCallPublisher>

The Log Call Publisher lets support agents who use Case Feed create logs for customer calls. 

This component can only be used in organizations that have Case Feed, Chatter, and feed tracking on cases enabled.

This example displays the Log a Call publisher.

<apex:page standardController="Case" showHeader="true">
 <apex:logCallPublisher id="myLogCalllPublisher" 
 entityId="{!case.id}" 
 title="Log a Call"
 width="500px"
 autoCollapseBody="false"
 />
</apex:page>
~|~
What does this Visualforce component do?

<apex:logCallPublisher>

(#VISUALFORCE)`|`<apex:logCallPublisher>

The Log Call Publisher lets support agents who use Case Feed create logs for customer calls. 

This component can only be used in organizations that have Case Feed, Chatter, and feed tracking on cases enabled.

This example displays the Log a Call publisher.

<apex:page standardController="Case" showHeader="true">
 <apex:logCallPublisher id="myLogCalllPublisher" 
 entityId="{!case.id}" 
 title="Log a Call"
 width="500px"
 autoCollapseBody="false"
 />
</apex:page>
~|~
This Visualforce component defines a location on a page that can be used to display specific messages, like warnings or errors, from the page controller and extensions. 

(#VISUALFORCE)`|`<apex:message>

Defines a location on a page that can be used to display specific messages, like warnings or errors, from the page controller and extensions. 

If an <apex:message> or <apex:messages> component is not included in a page, most warning and error messages are only shown in the debug log.
~|~
What does this Visualforce component do?

<apex:message>

(#VISUALFORCE)`|`<apex:message>

Defines a location on a page that can be used to display specific messages, like warnings or errors, from the page controller and extensions. 

If an <apex:message> or <apex:messages> component is not included in a page, most warning and error messages are only shown in the debug log.
~|~
This Visualforce component defines a location on a page for ALL messages, like warnings or errors, that were generated for all components on that page. 

(#VISUALFORCE)`|`<apex:messages>

Defines a location on a page for ALL messages, like warnings or errors, that were generated for all components on that page. 

If an <apex:message> or <apex:messages> component is not included in a page, most warning and error messages are only shown in the debug log.
~|~
What does this Visualforce component do?

<apex:messages>

(#VISUALFORCE)`|`<apex:messages>

Defines a location on a page for ALL messages, like warnings or errors, that were generated for all components on that page. 

If an <apex:message> or <apex:messages> component is not included in a page, most warning and error messages are only shown in the debug log.
~|~
This Visualforce component creates a read-only display of a label and value for a field on a Salesforce object.

(#VISUALFORCE)`|`<apex:outputField>

Creates a read-only display of a label and value for a field on a Salesforce object. 

An <apex:outputField> component respects the attributes of the associated field, including how it should be displayed to the user. For example, if the specified <apex:outputField> component is a currency field, the appropriate currency symbol is displayed. Likewise, if the <apex:outputField> component is a lookup field or URL, the value of the field is displayed as a link.

Note that if custom help is defined for the field in Setup, the field must be a child of an <apex:pageBlock> or <apex:pageBlockSectionItem>, and the Salesforce page header must be displayed for the custom help to appear on your Visualforce page. To override the display of custom help, use the <apex:outputField> in the body of an <apex:pageBlockSectionItem>.

The Rich Text Area data type can only be used with this component on pages running Salesforce.com API versions greater than 18.0.
~|~
What does this Visualforce component do?

<apex:outputField>

(#VISUALFORCE)`|`<apex:outputField>

Creates a read-only display of a label and value for a field on a Salesforce object. 

An <apex:outputField> component respects the attributes of the associated field, including how it should be displayed to the user. For example, if the specified <apex:outputField> component is a currency field, the appropriate currency symbol is displayed. Likewise, if the <apex:outputField> component is a lookup field or URL, the value of the field is displayed as a link.

Note that if custom help is defined for the field in Setup, the field must be a child of an <apex:pageBlock> or <apex:pageBlockSectionItem>, and the Salesforce page header must be displayed for the custom help to appear on your Visualforce page. To override the display of custom help, use the <apex:outputField> in the body of an <apex:pageBlockSectionItem>.

The Rich Text Area data type can only be used with this component on pages running Salesforce.com API versions greater than 18.0.
~|~
This Visualforce component creates a label for an input or output field, and can be used to provide a label for a controller method that does not correspond to a field on a Salesforce object.

(#VISUALFORCE)`|`<apex:outputLabel>

Creates a label for an input or output field. 

Use this component to provide a label for a controller method that does not correspond to a field on a Salesforce object.

EXAMPLE

<apex:outputLabel value="Checkbox" for="theCheckbox"/>
<apex:inputCheckbox value="{!inputValue}" id="theCheckbox"/>

The example above renders the following HTML:

<label for="theCheckbox">Checkbox</label>
<input id="theCheckbox" type="checkbox" name="theCheckbox" />
~|~
What does this Visualforce component do?

<apex:outputLabel>

(#VISUALFORCE)`|`<apex:outputLabel>

Creates a label for an input or output field. 

Use this component to provide a label for a controller method that does not correspond to a field on a Salesforce object.

EXAMPLE

<apex:outputLabel value="Checkbox" for="theCheckbox"/>
<apex:inputCheckbox value="{!inputValue}" id="theCheckbox"/>

The example above renders the following HTML:

<label for="theCheckbox">Checkbox</label>
<input id="theCheckbox" type="checkbox" name="theCheckbox" />
~|~
This Visualforce component creates a hyperlink to a URL.

(#VISUALFORCE)`|`<apex:outputLink>

Creates a hyperlink to a URL. 

◊ This component is rendered in HTML as an anchor tag with an href attribute. 

◊ Like its HTML equivalent, the body of an <apex:outputLink> is the text or image that displays as the link. 

◊ To add query string parameters to a link, use nested <apex:param> components.

See also: <apex:commandLink>

EXAMPLE

<apex:outputLink value="https://www.salesforce.com" id="theLink">www.salesforce.com</apex:outputLink>

The example above renders the following HTML:

<a id="theLink" name="theLink" href="https://www.salesforce.com">www.salesforce.com</a>
~|~
What does this Visualforce component do?

<apex:outputLink>

(#VISUALFORCE)`|`<apex:outputLink>

Creates a hyperlink to a URL. 

◊ This component is rendered in HTML as an anchor tag with an href attribute. 

◊ Like its HTML equivalent, the body of an <apex:outputLink> is the text or image that displays as the link. 

◊ To add query string parameters to a link, use nested <apex:param> components.

See also: <apex:commandLink>

EXAMPLE

<apex:outputLink value="https://www.salesforce.com" id="theLink">www.salesforce.com</apex:outputLink>

The example above renders the following HTML:

<a id="theLink" name="theLink" href="https://www.salesforce.com">www.salesforce.com</a>
~|~
This Visualforce component defines a set of content that is grouped together and rendered with an HTML <span> tag, <div> tag, or neither.

(#VISUALFORCE)`|`<apex:outputPanel>

Defines a set of content that is grouped together and rendered with an HTML <span> tag, <div> tag, or neither. 

◊ Developers can use an <apex:outputPanel> to group components together for AJAX refreshes.

EXAMPLE (<span>)

<!-- Spans do not add any additional formatting to the body of the outputPanel. -->
 
<apex:outputPanel id="thePanel">My span</apex:outputPanel>

The example above renders the following HTML:

<span id="thePanel">My span</span>

EXAMPLE (<div>)

<!-- Divs place the body of the outputPanel within the equivalent of an HTML paragraph tag. -->
 
<apex:outputPanel id="thePanel" layout="block">My div</apex:outputPanel>

The example above renders the following HTML:

<div id="thePanel">My div</div>
~|~
What does this Visualforce component do?

<apex:outputPanel>

(#VISUALFORCE)`|`<apex:outputPanel>

Defines a set of content that is grouped together and rendered with an HTML <span> tag, <div> tag, or neither. 

◊ Developers can use an <apex:outputPanel> to group components together for AJAX refreshes.

EXAMPLE (<span>)

<!-- Spans do not add any additional formatting to the body of the outputPanel. -->
 
<apex:outputPanel id="thePanel">My span</apex:outputPanel>

The example above renders the following HTML:

<span id="thePanel">My span</span>

EXAMPLE (<div>)

<!-- Divs place the body of the outputPanel within the equivalent of an HTML paragraph tag. -->
 
<apex:outputPanel id="thePanel" layout="block">My div</apex:outputPanel>

The example above renders the following HTML:

<div id="thePanel">My div</div>
~|~
This Visualforce component displays text on a Visualforce page.

(#VISUALFORCE)`|`<apex:outputText>

Displays text on a Visualforce page. 

◊ Developers can customize the appearance of <apex:outputText> using CSS styles, in which case the generated text is wrapped in an HTML <span> tag. 

◊ Developers can also escape the rendered text if it contains sensitive HTML and XML characters. 

◊ This component does take localization into account.

◊ Use with nested param tags to format the text values, where {n} corresponds to the n-th nested param tag. 

◊ The value attribute supports the same syntax as the MessageFormat class in Java. See the MessageFormat class JavaDocs for more information.

WARNING!

Encrypted custom fields that are embedded in the <apex:outputText> component display in clear text. The <apex:outputText> component doesn't respect the View Encrypted Data permission for users. To prevent showing sensitive information to unauthorized users, use the <apex:outputField> tag instead.
~|~
What does this Visualforce component do?

<apex:outputText>

(#VISUALFORCE)`|`<apex:outputText>

Displays text on a Visualforce page. 

◊ Developers can customize the appearance of <apex:outputText> using CSS styles, in which case the generated text is wrapped in an HTML <span> tag. 

◊ Developers can also escape the rendered text if it contains sensitive HTML and XML characters. 

◊ This component does take localization into account.

◊ Use with nested param tags to format the text values, where {n} corresponds to the n-th nested param tag. 

◊ The value attribute supports the same syntax as the MessageFormat class in Java. See the MessageFormat class JavaDocs for more information.

WARNING!

Encrypted custom fields that are embedded in the <apex:outputText> component display in clear text. The <apex:outputText> component doesn't respect the View Encrypted Data permission for users. To prevent showing sensitive information to unauthorized users, use the <apex:outputField> tag instead.
~|~
This attribute of the <apex:message> component takes a String that specifies the ID of the component with which the message should be associated.

(#VISUALFORCE)`|`The "for" attribute of <apex:message>

DESCRIPTION:

◊ A String that specifies the ID of the component with which the message should be associated.

◊ Optional

<apex:page controller="MyController" tabStyle="Account">
 <style>
 .locationError { color: blue; font-weight: strong;}
 .employeeError { color: green; font-weight: strong;}
 </style>

 <apex:form > 
 <apex:pageBlock title="Hello {!$User.FirstName}!">
 This is your new page for the {!name} controller. <br/>
 You are viewing the {!account.name} account.

 <p>Number of Locations: <apex:inputField value="{!account.NumberofLocations__c}" 
 id="Location_validation"/> 
 (Enter an alphabetic character here, then click Save to see what happens.) </p>

 <p>Number of Employees: <apex:inputField value="{!account.NumberOfEmployees}"
 id="Employee_validation"/> 
 (Enter an alphabetic character here, then click Save to see what happens.) </p>
 <p /> 
 <apex:commandButton action="{!save}" value="Save"/> 
 <p />
 <apex:message for="Location_validation" styleClass="locationError" /> <p /> 
 <apex:message for="Employee_validation" styleClass="employeeError" /> <p /> 
 </apex:pageBlock> 
 </apex:form> 
</apex:page>
~|~
What does the "for" attribute of the <apex:message> component do? 

Is it required? 

What kind of information does it expect?

(#VISUALFORCE)`|`The "for" attribute of <apex:message>

DESCRIPTION:

◊ A String that specifies the ID of the component with which the message should be associated.

◊ Optional

<apex:page controller="MyController" tabStyle="Account">
 <style>
 .locationError { color: blue; font-weight: strong;}
 .employeeError { color: green; font-weight: strong;}
 </style>

 <apex:form > 
 <apex:pageBlock title="Hello {!$User.FirstName}!">
 This is your new page for the {!name} controller. <br/>
 You are viewing the {!account.name} account.

 <p>Number of Locations: <apex:inputField value="{!account.NumberofLocations__c}" 
 id="Location_validation"/> 
 (Enter an alphabetic character here, then click Save to see what happens.) </p>

 <p>Number of Employees: <apex:inputField value="{!account.NumberOfEmployees}"
 id="Employee_validation"/> 
 (Enter an alphabetic character here, then click Save to see what happens.) </p>
 <p /> 
 <apex:commandButton action="{!save}" value="Save"/> 
 <p />
 <apex:message for="Location_validation" styleClass="locationError" /> <p /> 
 <apex:message for="Employee_validation" styleClass="employeeError" /> <p /> 
 </apex:pageBlock> 
 </apex:form> 
</apex:page>
~|~
True or False?

Encrypted custom fields that are embedded in the <apex:outputText> component display as masked text, eg. ********.

To customize the masking character, a developer must use the "FieldMask" attribute of <apex:outputText>.

(#VISUALFORCE)`|`False.

Encrypted custom fields that are embedded in the <apex:outputText> component display in clear text. 

The <apex:outputText> component doesn't respect the View Encrypted Data permission for users. 

To prevent showing sensitive information to unauthorized users, use the <apex:outputField> tag instead.
~|~
True or False?

The <apex:outputField> component does not respect the View Encrypted Data permission for users, and will display encrypted fields in clear text. 

(#VISUALFORCE)`|`False.

To prevent showing sensitive information to unauthorized users, use the <apex:outputField> tag instead of <apex:outputText>.

Encrypted custom fields that are embedded in the <apex:outputText> component display in clear text. 

However, the <apex:outputField> component respects the View Encrypted Data permission for users, and will mask the field output accordingly.
~|~
This Visualforce component defines a single Visualforce page. 

(#VISUALFORCE)`|`<apex:page>

Defines a single Visualforce page. 

All pages must be wrapped inside a single page component tag.

EXAMPLE

<apex:page renderAs="pdf">
 <style> body { font-family: Arial Unicode MS; } </style>
 <h1>Congratulations</h1>
 <p>This is your new PDF</p>
</apex:page>
~|~
What does this Visualforce component do?

<apex:page>

(#VISUALFORCE)`|`<apex:page>

Defines a single Visualforce page. 

All pages must be wrapped inside a single page component tag.

EXAMPLE

<apex:page renderAs="pdf">
 <style> body { font-family: Arial Unicode MS; } </style>
 <h1>Congratulations</h1>
 <p>This is your new PDF</p>
</apex:page>
~|~
This Visualforce component creates an area on a page that uses styling similar to the appearance of a Salesforce detail page, but without any default content.

(#VISUALFORCE)`|`<apex:pageBlock>

Creates an area on a page that uses styling similar to the appearance of a Salesforce detail page, but without any default content.

EXAMPLE

<apex:page standardController="Account">
 <apex:form>
 <apex:pageBlock title="My Content" mode="edit">
 <apex:pageBlockButtons>
 <apex:commandButton action="{!save}" value="Save"/>
 </apex:pageBlockButtons>
 <apex:pageBlockSection title="My Content Section" columns="2">
 <apex:inputField value="{!account.name}"/>
 <apex:inputField value="{!account.site}"/>
 <apex:inputField value="{!account.type}"/>
 <apex:inputField value="{!account.accountNumber}"/>
 </apex:pageBlockSection>
 </apex:pageBlock>
 </apex:form>
</apex:page>
~|~
What does this Visualforce component do?

<apex:pageBlock>

(#VISUALFORCE)`|`<apex:pageBlock>

Creates an area on a page that uses styling similar to the appearance of a Salesforce detail page, but without any default content.

EXAMPLE

<apex:page standardController="Account">
 <apex:form>
 <apex:pageBlock title="My Content" mode="edit">
 <apex:pageBlockButtons>
 <apex:commandButton action="{!save}" value="Save"/>
 </apex:pageBlockButtons>
 <apex:pageBlockSection title="My Content Section" columns="2">
 <apex:inputField value="{!account.name}"/>
 <apex:inputField value="{!account.site}"/>
 <apex:inputField value="{!account.type}"/>
 <apex:inputField value="{!account.accountNumber}"/>
 </apex:pageBlockSection>
 </apex:pageBlock>
 </apex:form>
</apex:page>
~|~
This Visualforce component creates a set of buttons that are styled like standard Salesforce buttons. 

(#VISUALFORCE)`|`<apex:pageBlockButtons>

Creates a set of buttons that are styled like standard Salesforce buttons. 

◊ This component must be a child component of an <apex:pageBlock>.

◊ Note that it is not necessary for the buttons themselves to be direct children of the <apex:pageBlockButtons> component—buttons that are located at any level within an <apex:pageBlockButtons> component are styled appropriately.

EXAMPLE

<apex:page standardController="Account">
 <apex:form>
 <apex:pageBlock title="My Content" mode="edit">
 <apex:pageBlockButtons>
 <apex:commandButton action="{!save}" value="Save"/>
 </apex:pageBlockButtons>
 <apex:pageBlockSection title="My Content Section" columns="2">
 <apex:inputField value="{!account.name}"/>
 <apex:inputField value="{!account.site}"/>
 <apex:inputField value="{!account.type}"/>
 <apex:inputField value="{!account.accountNumber}"/>
 </apex:pageBlockSection>
 </apex:pageBlock>
 </apex:form>
</apex:page>
~|~
What does this Visualforce component do?

<apex:pageBlockButtons>

(#VISUALFORCE)`|`<apex:pageBlockButtons>

Creates a set of buttons that are styled like standard Salesforce buttons. 

◊ This component must be a child component of an <apex:pageBlock>.

◊ Note that it is not necessary for the buttons themselves to be direct children of the <apex:pageBlockButtons> component—buttons that are located at any level within an <apex:pageBlockButtons> component are styled appropriately.

EXAMPLE

<apex:page standardController="Account">
 <apex:form>
 <apex:pageBlock title="My Content" mode="edit">
 <apex:pageBlockButtons>
 <apex:commandButton action="{!save}" value="Save"/>
 </apex:pageBlockButtons>
 <apex:pageBlockSection title="My Content Section" columns="2">
 <apex:inputField value="{!account.name}"/>
 <apex:inputField value="{!account.site}"/>
 <apex:inputField value="{!account.type}"/>
 <apex:inputField value="{!account.accountNumber}"/>
 </apex:pageBlockSection>
 </apex:pageBlock>
 </apex:form>
</apex:page>
~|~
This Visualforce component creates a section of data within an <apex:pageBlock> component, similar to a section in a standard Salesforce page layout definition.

(#VISUALFORCE)`|`<apex:pageBlockSection>

Creates a section of data within an <apex:pageBlock> component, similar to a section in a standard Salesforce page layout definition.

◊ An <apex:pageBlockSection> component consists of one or more columns, each of which spans two cells: one for a field's label, and one for its value.

◊ Each component found in the body of an <apex:pageBlockSection> is placed into the next cell in a row until the number of columns is reached. At that point, the next component wraps to the next row and is placed in the first cell.

◊ To add a field from a Salesforce object to an <apex:pageBlockSection>, use an <apex:inputField> or <apex:outputField> component. Each of these components automatically displays with the field's associated label. 

◊ To add fields for variables or methods that are not based on Salesforce object fields, or to customize the format of Salesforce object field labels, use an <apex:pageBlockSectionItem> component. 

◊ Each <apex:inputField>, <apex:outputField>, or <apex:pageBlockSectionItem> component spans both cells of a single column.
~|~
What does this Visualforce component do?

<apex:pageBlockSection>

(#VISUALFORCE)`|`<apex:pageBlockSection>

Creates a section of data within an <apex:pageBlock> component, similar to a section in a standard Salesforce page layout definition.

◊ An <apex:pageBlockSection> component consists of one or more columns, each of which spans two cells: one for a field's label, and one for its value.

◊ Each component found in the body of an <apex:pageBlockSection> is placed into the next cell in a row until the number of columns is reached. At that point, the next component wraps to the next row and is placed in the first cell.

◊ To add a field from a Salesforce object to an <apex:pageBlockSection>, use an <apex:inputField> or <apex:outputField> component. Each of these components automatically displays with the field's associated label. 

◊ To add fields for variables or methods that are not based on Salesforce object fields, or to customize the format of Salesforce object field labels, use an <apex:pageBlockSectionItem> component. 

◊ Each <apex:inputField>, <apex:outputField>, or <apex:pageBlockSectionItem> component spans both cells of a single column.
~|~
This Visualforce component creates a single piece of data in an <apex:pageBlockSection> that takes up one column in one row. 

(#VISUALFORCE)`|`<apex:pageBlockSectionItem>

Creates a single piece of data in an <apex:pageBlockSection> that takes up one column in one row. 

◊ An <apex:pageBlockSectionItem> component can include up to two child components. 

◊ If no content is specified, the column is rendered as an empty space. 

◊ If one child component is specified, the content spans both cells of the column. 

◊ If two child components are specified, the content of the first is rendered in the left, "label" cell of the column, while the content of the second is rendered in the right, "data" cell of the column.

◊ Note that if you include an <apex:outputField> or an <apex:inputField> component in an <apex:pageBlockSectionItem>, these components do not display with their label or custom help text as they do when they are children of an <apex:pageBlockSectionItem>.

◊ Also note that <apex:pageBlockSectionItem> components cannot be rerendered; rerender the child components instead.
~|~
What does this Visualforce component do?

<apex:pageBlockSectionItem>

(#VISUALFORCE)`|`<apex:pageBlockSectionItem>

Creates a single piece of data in an <apex:pageBlockSection> that takes up one column in one row. 

◊ An <apex:pageBlockSectionItem> component can include up to two child components. 

◊ If no content is specified, the column is rendered as an empty space. 

◊ If one child component is specified, the content spans both cells of the column. 

◊ If two child components are specified, the content of the first is rendered in the left, "label" cell of the column, while the content of the second is rendered in the right, "data" cell of the column.

◊ Note that if you include an <apex:outputField> or an <apex:inputField> component in an <apex:pageBlockSectionItem>, these components do not display with their label or custom help text as they do when they are children of an <apex:pageBlockSectionItem>.

◊ Also note that <apex:pageBlockSectionItem> components cannot be rerendered; rerender the child components instead.
~|~
This Visualforce component creates a list of data displayed as a table within either an <apex:pageBlock> or <apex:pageBlockSection> component, similar to a related list or list view in a standard Salesforce page.

(#VISUALFORCE)`|`<apex:pageBlockTable>

Creates a list of data displayed as a table within either an <apex:pageBlock> or <apex:pageBlockSection> component, similar to a related list or list view in a standard Salesforce page.

◊ Like an <apex:dataTable>, an <apex:pageBlockTable> is defined by iterating over a set of data, displaying information about one item of data per row. 

◊ The set of data can contain up to 1,000 items.

◊ The body of the <apex:pageBlockTable> contains one or more column components that specify what information should be displayed for each item of data, similar to a table. 

◊ Unlike the <apex:dataTable> component, the default styling for <apex:pageBlockTable> matches standard Salesforce styles. Any additional styles specified with <apex:pageBlockTable> attributes are appended to the standard Salesforce styles.

◊ Note that if you specify an sObject field as the value attribute for a column, the associated label for that field is used as the column header by default. To override this behavior, use the headerValue attribute on the column, or the column's header facet.

EXAMPLE

<apex:page standardController="Account">
 <apex:pageBlock title="My Content">
 <apex:pageBlockTable value="{!account.Contacts}" var="item">
 <apex:column value="{!item.name}"/> 
 </apex:pageBlockTable> 
 </apex:pageBlock> 
</apex:page>
~|~
What does this Visualforce component do?

<apex:pageBlockTable>

(#VISUALFORCE)`|`<apex:pageBlockTable>

Creates a list of data displayed as a table within either an <apex:pageBlock> or <apex:pageBlockSection> component, similar to a related list or list view in a standard Salesforce page.

◊ Like an <apex:dataTable>, an <apex:pageBlockTable> is defined by iterating over a set of data, displaying information about one item of data per row. 

◊ The set of data can contain up to 1,000 items.

◊ The body of the <apex:pageBlockTable> contains one or more column components that specify what information should be displayed for each item of data, similar to a table. 

◊ Unlike the <apex:dataTable> component, the default styling for <apex:pageBlockTable> matches standard Salesforce styles. Any additional styles specified with <apex:pageBlockTable> attributes are appended to the standard Salesforce styles.

◊ Note that if you specify an sObject field as the value attribute for a column, the associated label for that field is used as the column header by default. To override this behavior, use the headerValue attribute on the column, or the column's header facet.

EXAMPLE

<apex:page standardController="Account">
 <apex:pageBlock title="My Content">
 <apex:pageBlockTable value="{!account.Contacts}" var="item">
 <apex:column value="{!item.name}"/> 
 </apex:pageBlockTable> 
 </apex:pageBlock> 
</apex:page>
~|~
This Visualforce component this component should be used for presenting custom messages in the page using the Salesforce pattern for errors, warnings and other types of messages for a given severity.

(#VISUALFORCE)`|`<apex:pageMessage>

This component should be used for presenting custom messages in the page using the Salesforce pattern for errors, warnings and other types of messages for a given severity. 

See also the pageMessages component.

EXAMPLE

<apex:page standardController="Opportunity" recordSetVar="opportunities"
 tabStyle="Opportunity" sidebar="false">
 <p>Enter an alphabetic character for the "Close Date," 
 then click Save to see what happens.</p>
 <apex:form >
 <apex:pageBlock >
 <apex:pageMessage summary="This pageMessage will always display. Validation error 
 messages appear in the pageMessages component." severity="warning" strength="3" />
 <apex:pageMessages />
 <apex:pageBlockButtons >
 <apex:commandButton value="Save" action="{!save}"/>
 </apex:pageBlockButtons>
 <apex:pageBlockTable value="{!opportunities}" var="opp">
 <apex:column value="{!opp.name}"/>
 <apex:column headerValue="Close Date">
 <apex:inputField value="{!opp.closeDate}"/>
 </apex:column>
 </apex:pageBlockTable>
 </apex:pageBlock>
 </apex:form>
</apex:page>
~|~
What does this Visualforce component do?

<apex:pageMessage>

(#VISUALFORCE)`|`<apex:pageMessage>

This component should be used for presenting custom messages in the page using the Salesforce pattern for errors, warnings and other types of messages for a given severity. 

See also the pageMessages component.

EXAMPLE

<apex:page standardController="Opportunity" recordSetVar="opportunities"
 tabStyle="Opportunity" sidebar="false">
 <p>Enter an alphabetic character for the "Close Date," 
 then click Save to see what happens.</p>
 <apex:form >
 <apex:pageBlock >
 <apex:pageMessage summary="This pageMessage will always display. Validation error 
 messages appear in the pageMessages component." severity="warning" strength="3" />
 <apex:pageMessages />
 <apex:pageBlockButtons >
 <apex:commandButton value="Save" action="{!save}"/>
 </apex:pageBlockButtons>
 <apex:pageBlockTable value="{!opportunities}" var="opp">
 <apex:column value="{!opp.name}"/>
 <apex:column headerValue="Close Date">
 <apex:inputField value="{!opp.closeDate}"/>
 </apex:column>
 </apex:pageBlockTable>
 </apex:pageBlock>
 </apex:form>
</apex:page>
~|~
This Visualforce component displays all messages that were generated for all components on the current page, presented using the Salesforce styling.

(#VISUALFORCE)`|`<apex:pageMessages>

This component displays all messages that were generated for all components on the current page, presented using the Salesforce styling.

EXAMPLE

<apex:page standardController="Opportunity" recordSetVar="opportunities"
 tabStyle="Opportunity" sidebar="false">
 <p>Enter an alphabetic character for the "Close Date," 
 then click Save to see what happens.</p>
 <apex:form >
 <apex:pageBlock >
 <apex:pageMessages />
 <apex:pageBlockButtons >
 <apex:commandButton value="Save" action="{!save}"/>
 </apex:pageBlockButtons>
 <apex:pageBlockTable value="{!opportunities}" var="opp">
 <apex:column value="{!opp.name}"/>
 <apex:column headerValue="Close Date">
 <apex:inputField value="{!opp.closeDate}"/>
 </apex:column>
 </apex:pageBlockTable>
 </apex:pageBlock>
 </apex:form>
</apex:page>
~|~
What does this Visualforce component do?

<apex:pageMessages>

(#VISUALFORCE)`|`<apex:pageMessages>

This component displays all messages that were generated for all components on the current page, presented using the Salesforce styling.

EXAMPLE

<apex:page standardController="Opportunity" recordSetVar="opportunities"
 tabStyle="Opportunity" sidebar="false">
 <p>Enter an alphabetic character for the "Close Date," 
 then click Save to see what happens.</p>
 <apex:form >
 <apex:pageBlock >
 <apex:pageMessages />
 <apex:pageBlockButtons >
 <apex:commandButton value="Save" action="{!save}"/>
 </apex:pageBlockButtons>
 <apex:pageBlockTable value="{!opportunities}" var="opp">
 <apex:column value="{!opp.name}"/>
 <apex:column headerValue="Close Date">
 <apex:inputField value="{!opp.closeDate}"/>
 </apex:column>
 </apex:pageBlockTable>
 </apex:pageBlock>
 </apex:form>
</apex:page>
~|~
This Visualforce component creates a page area that includes one or more Panel Bar Items that can expand when a user clicks the associated header.

(#VISUALFORCE)`|`<apex:panelBar>

Creates a page area that includes one or more <apex:panelBarItem> tags that can expand when a user clicks the associated header. 

◊ When an <apex:panelBarItem> is expanded, the header and the content of the item are displayed while the content of all other items are hidden. 

◊ When another <apex:panelBarItem> is expanded, the content of the original item is hidden again. 

◊ An <apex:panelBar> can include up to 1,000 <apex:panelBarItem> tags.

<!-- Page: panelBar --> 

<!-- Click on Item 1, Item 2, or Item 3 to display the content of the panel -->

<apex:page>
 <apex:panelBar>
 <apex:panelBarItem label="Item 1">data 1</apex:panelBarItem>
 <apex:panelBarItem label="Item 2">data 2</apex:panelBarItem>
 <apex:panelBarItem label="Item 3">data 3</apex:panelBarItem>
 </apex:panelBar>
</apex:page>
~|~
What does this Visualforce component do?

<apex:panelBar>

(#VISUALFORCE)`|`<apex:panelBar>

Creates a page area that includes one or more <apex:panelBarItem> tags that can expand when a user clicks the associated header. 

◊ When an <apex:panelBarItem> is expanded, the header and the content of the item are displayed while the content of all other items are hidden. 

◊ When another <apex:panelBarItem> is expanded, the content of the original item is hidden again. 

◊ An <apex:panelBar> can include up to 1,000 <apex:panelBarItem> tags.

<!-- Page: panelBar --> 

<!-- Click on Item 1, Item 2, or Item 3 to display the content of the panel -->

<apex:page>
 <apex:panelBar>
 <apex:panelBarItem label="Item 1">data 1</apex:panelBarItem>
 <apex:panelBarItem label="Item 2">data 2</apex:panelBarItem>
 <apex:panelBarItem label="Item 3">data 3</apex:panelBarItem>
 </apex:panelBar>
</apex:page>
~|~
This Visualforce component creates a section inside of a Panel Bar that can expand or retract when a user clicks the section header. 

(#VISUALFORCE)`|`<apex:panelBarItem>

Creates a section inside of an <apex:panelBar> that can expand or retract when a user clicks the section header. 

◊ When expanded, the header and the content of the <apex:panelBarItem> is displayed. 

◊ When retracted, only the header of the <apex:panelBarItem> displays.

<!-- Page: panelBar --> 

<!-- Click on Item 1, Item 2, or Item 3 to display the content of the panel -->

<apex:page>
 <apex:panelBar>
 <apex:panelBarItem label="Item 1">data 1</apex:panelBarItem>
 <apex:panelBarItem label="Item 2">data 2</apex:panelBarItem>
 <apex:panelBarItem label="Item 3">data 3</apex:panelBarItem>
 </apex:panelBar>
</apex:page>
~|~
What does this Visualforce component do?

<apex:panelBarItem>

(#VISUALFORCE)`|`<apex:panelBarItem>

Creates a section inside of an <apex:panelBar> that can expand or retract when a user clicks the section header. 

◊ When expanded, the header and the content of the <apex:panelBarItem> is displayed. 

◊ When retracted, only the header of the <apex:panelBarItem> displays.

<!-- Page: panelBar --> 

<!-- Click on Item 1, Item 2, or Item 3 to display the content of the panel -->

<apex:page>
 <apex:panelBar>
 <apex:panelBarItem label="Item 1">data 1</apex:panelBarItem>
 <apex:panelBarItem label="Item 2">data 2</apex:panelBarItem>
 <apex:panelBarItem label="Item 3">data 3</apex:panelBarItem>
 </apex:panelBar>
</apex:page>
~|~
This Visualforce component renders an HTML table element in which each component found in the body of the <apex:panelGrid> is placed into a corresponding cell in the first row until the number of columns is reached. At that point, the next component wraps to the next row and is placed in the first cell.

(#VISUALFORCE)`|`<apex:panelGrid>

Renders an HTML table element in which each component found in the body of the <apex:panelGrid> is placed into a corresponding cell in the first row until the number of columns is reached. At that point, the next component wraps to the next row and is placed in the first cell.

◊ Note that if an <apex:repeat> component is used within an <apex:panelGrid> component, all content generated by the <apex:repeat> component is placed in a single <apex:panelGrid> cell. 

◊ The <apex:panelGrid> component differs from <apex:dataTable> because it does not process a set of data with an iteration variable.

◊ See also: <apex:panelGroup>

EXAMPLE

<apex:page>
 <apex:panelGrid columns="3" id="theGrid">
 <apex:outputText value="First" id="theFirst"/>
 <apex:outputText value="Second" id="theSecond"/>
 <apex:outputText value="Third" id="theThird"/>
 <apex:outputText value="Fourth" id="theFourth"/>
 </apex:panelGrid>
</apex:page>

The example above renders the following HTML:

<table id="theGrid">
 <tbody>
 <tr>
 <td><span id="theFirst">First</span></td>
 <td><span id="theSecond">Second</span></td>
 <td><span id="theThird">Third</span></td>
 </tr>
 <tr>
 <td><span id="theFourth">Fourth</span></td>
 </tr>
 </tbody>
</table>
~|~
What does this Visualforce component do?

<apex:panelGrid>

(#VISUALFORCE)`|`<apex:panelGrid>

Renders an HTML table element in which each component found in the body of the <apex:panelGrid> is placed into a corresponding cell in the first row until the number of columns is reached. At that point, the next component wraps to the next row and is placed in the first cell.

◊ Note that if an <apex:repeat> component is used within an <apex:panelGrid> component, all content generated by the <apex:repeat> component is placed in a single <apex:panelGrid> cell. 

◊ The <apex:panelGrid> component differs from <apex:dataTable> because it does not process a set of data with an iteration variable.

◊ See also: <apex:panelGroup>

EXAMPLE

<apex:page>
 <apex:panelGrid columns="3" id="theGrid">
 <apex:outputText value="First" id="theFirst"/>
 <apex:outputText value="Second" id="theSecond"/>
 <apex:outputText value="Third" id="theThird"/>
 <apex:outputText value="Fourth" id="theFourth"/>
 </apex:panelGrid>
</apex:page>

The example above renders the following HTML:

<table id="theGrid">
 <tbody>
 <tr>
 <td><span id="theFirst">First</span></td>
 <td><span id="theSecond">Second</span></td>
 <td><span id="theThird">Third</span></td>
 </tr>
 <tr>
 <td><span id="theFourth">Fourth</span></td>
 </tr>
 </tbody>
</table>
~|~
This Visualforce component defines a container for multiple child components so that they can be displayed in a single panelGrid cell. 

(#VISUALFORCE)`|`<apex:panelGroup>

Defines a container for multiple child components so that they can be displayed in a single panelGrid cell. 

◊ An <apex:panelGroup> must be a child component of an <apex:panelGrid>.

EXAMPLE

<apex:page>
 <apex:panelGrid columns="3" id="theGrid">
 <apex:outputText value="First" id="theFirst"/>
 <apex:outputText value="Second" id="theSecond"/>
 <apex:panelGroup id="theGroup">
 <apex:outputText value="Third" id="theThird"/>
 <apex:outputText value="Fourth" id="theFourth"/>
 </apex:panelGroup>
 </apex:panelGrid>
</apex:page>

The example above renders the following HTML:

<table id="theGrid">
 <tbody>
 <tr>
 <td><span id="theFirst">First</span></td>
 <td><span id="theSecond">Second</span></td>
 <td><span id="theGroup">
 <span id="theThird">Third</span>
 <span id="theFourth">Fourth</span>
 </span></td>
 </tr>
 </tbody>
</table>
~|~
What does this Visualforce component do?

<apex:panelGroup>

(#VISUALFORCE)`|`<apex:panelGroup>

Defines a container for multiple child components so that they can be displayed in a single panelGrid cell. 

◊ An <apex:panelGroup> must be a child component of an <apex:panelGrid>.

EXAMPLE

<apex:page>
 <apex:panelGrid columns="3" id="theGrid">
 <apex:outputText value="First" id="theFirst"/>
 <apex:outputText value="Second" id="theSecond"/>
 <apex:panelGroup id="theGroup">
 <apex:outputText value="Third" id="theThird"/>
 <apex:outputText value="Fourth" id="theFourth"/>
 </apex:panelGroup>
 </apex:panelGrid>
</apex:page>

The example above renders the following HTML:

<table id="theGrid">
 <tbody>
 <tr>
 <td><span id="theFirst">First</span></td>
 <td><span id="theSecond">Second</span></td>
 <td><span id="theGroup">
 <span id="theThird">Third</span>
 <span id="theFourth">Fourth</span>
 </span></td>
 </tr>
 </tbody>
</table>
~|~
This Visualforce component defines a parameter for the parent component. 

(#VISUALFORCE)`|`<apex:param>

Defines a parameter for the parent component. 

The <apex:param> component can only be a child of the following components:

◊ <apex:actionFunction>
◊ <apex:actionSupport>
◊ <apex:commandLink>
◊ <apex:outputLink>
◊ <apex:outputText>
◊ <flow:interview>

Within <apex:outputText>, there is support for the <apex:param> tag to match the syntax of the MessageFormat class in Java. See the MessageFormat class JavaDocs for more information.

EXAMPLE

<apex:page standardController="Contact">
 <apex:outputLink value="http://google.com/search">
 Search Google
 <apex:param name="q" value="{!contact.name}"/>
 </apex:outputLink>
</apex:page>
~|~
What does this Visualforce component do?

<apex:param>

(#VISUALFORCE)`|`<apex:param>

Defines a parameter for the parent component. 

The <apex:param> component can only be a child of the following components:

◊ <apex:actionFunction>
◊ <apex:actionSupport>
◊ <apex:commandLink>
◊ <apex:outputLink>
◊ <apex:outputText>
◊ <flow:interview>

Within <apex:outputText>, there is support for the <apex:param> tag to match the syntax of the MessageFormat class in Java. See the MessageFormat class JavaDocs for more information.

EXAMPLE

<apex:page standardController="Contact">
 <apex:outputLink value="http://google.com/search">
 Search Google
 <apex:param name="q" value="{!contact.name}"/>
 </apex:outputLink>
</apex:page>
~|~
This Visualforce component defines a data series to be rendered as wedges in a Visualforce pie chart. 

(#VISUALFORCE)`|`<apex:pieSeries>

Defines a data series to be rendered as wedges in a Visualforce pie chart. 

◊ At a minimum you must specify the fields in the data collection to use as label and value pairs for each pie wedge.

◊ Note: This component must be enclosed within an <apex:chart> component. You can only have one <apex:pieSeries> in a chart.

EXAMPLE

<apex:chart data="{!pieData}" height="300" width="400">
 <apex:pieSeries labelField="name" dataField="data1"/>
</apex:chart>
~|~
What does this Visualforce component do?

<apex:pieSeries>

(#VISUALFORCE)`|`<apex:pieSeries>

Defines a data series to be rendered as wedges in a Visualforce pie chart. 

◊ At a minimum you must specify the fields in the data collection to use as label and value pairs for each pie wedge.

◊ Note: This component must be enclosed within an <apex:chart> component. You can only have one <apex:pieSeries> in a chart.

EXAMPLE

<apex:chart data="{!pieData}" height="300" width="400">
 <apex:pieSeries labelField="name" dataField="data1"/>
</apex:chart>
~|~
This Visualforce component defines a data series to be rendered as the area inside a series of connected points in a radial Visualforce chart. 

(#VISUALFORCE)`|`<apex:radarSeries>

Defines a data series to be rendered as the area inside a series of connected points in a radial Visualforce chart. 

◊ Radar charts are also sometimes called "spider web" charts. 

◊ At a minimum you must specify the fields in the data collection to use as X and Y values for each point, as well as a radial axis to scale against.

◊ Note: This component must be enclosed within an <apex:chart> component. You can have multiple <apex:radarSeries> components in a single chart.

EXAMPLE

<apex:chart height="530" width="700" legend="true" data="{!data}">
 <apex:legend position="left"/>
 <apex:axis type="Radial" position="radial">
 <apex:chartLabel/>
 </apex:axis>
 <apex:radarSeries xField="name" yField="data1" tips="true" opacity="0.4"/>
 <apex:radarSeries xField="name" yField="data2" tips="true" opacity="0.4"/>
 <apex:radarSeries xField="name" yField="data3" tips="true" 
 markerType="cross" strokeWidth="2" strokeColor="#f33" opacity="0.4"/>
</apex:chart>
~|~
What does this Visualforce component do?

<apex:radarSeries>

(#VISUALFORCE)`|`<apex:radarSeries>

Defines a data series to be rendered as the area inside a series of connected points in a radial Visualforce chart. 

◊ Radar charts are also sometimes called "spider web" charts. 

◊ At a minimum you must specify the fields in the data collection to use as X and Y values for each point, as well as a radial axis to scale against.

◊ Note: This component must be enclosed within an <apex:chart> component. You can have multiple <apex:radarSeries> components in a single chart.

EXAMPLE

<apex:chart height="530" width="700" legend="true" data="{!data}">
 <apex:legend position="left"/>
 <apex:axis type="Radial" position="radial">
 <apex:chartLabel/>
 </apex:axis>
 <apex:radarSeries xField="name" yField="data1" tips="true" opacity="0.4"/>
 <apex:radarSeries xField="name" yField="data2" tips="true" opacity="0.4"/>
 <apex:radarSeries xField="name" yField="data3" tips="true" 
 markerType="cross" strokeWidth="2" strokeColor="#f33" opacity="0.4"/>
</apex:chart>
~|~
This Visualforce component displays a list of Salesforce records that are related to a parent record with a lookup or master-detail relationship.

(#VISUALFORCE)`|`<apex:relatedList>

Displays a list of Salesforce records that are related to a parent record with a lookup or master-detail relationship.

EXAMPLE

<apex:page standardController="Account">
 <apex:pageBlock>
 You're looking at some related lists for {!account.name}:
 </apex:pageBlock>

 <apex:relatedList list="Opportunities" />

 <apex:relatedList list="Contacts">
 <apex:facet name="header">Titles can be overriden with facets</apex:facet>
 </apex:relatedList>

 <apex:relatedList list="Cases" title="Or you can keep the image, but change the text" />
</apex:page>
~|~
What does this Visualforce component do?

<apex:relatedList>

(#VISUALFORCE)`|`<apex:relatedList>

Displays a list of Salesforce records that are related to a parent record with a lookup or master-detail relationship.

EXAMPLE

<apex:page standardController="Account">
 <apex:pageBlock>
 You're looking at some related lists for {!account.name}:
 </apex:pageBlock>

 <apex:relatedList list="Opportunities" />

 <apex:relatedList list="Contacts">
 <apex:facet name="header">Titles can be overriden with facets</apex:facet>
 </apex:relatedList>

 <apex:relatedList list="Cases" title="Or you can keep the image, but change the text" />
</apex:page>
~|~
This Visualforce iteration component allows you to output the contents of a collection according to a structure that you specify. The collection can include up to 1,000 items.

(#VISUALFORCE)`|`<apex:repeat>

An iteration component that allows you to output the contents of a collection according to a structure that you specify. 

The collection can include up to 1,000 items.

Note that if used within an <apex:pageBlockSection> or <apex:panelGrid> component, all content generated by a child <apex:repeat> component is placed in a single <apex:pageBlockSection> or <apex:panelGrid> cell.

This component cannot be used as a direct child of the following components:

<apex:dataTable>
<apex:pageBlockTable>
<apex:panelBar>
<apex:selectCheckboxes>
<apex:selectList>
<apex:selectRadio>
<apex:tabPanel>

<!-- Page -->

<apex:page controller="repeatCon" id="thePage">
 <apex:repeat value="{!strings}" var="string" id="theRepeat">
 <apex:outputText value="{!string}" id="theValue"/><br/>
 </apex:repeat>
</apex:page>

/*** Controller: ***/

public class repeatCon {
 public String[] getStrings() {
 return new String[]{'ONE','TWO','THREE'};
 }
}

The example above renders the following HTML:

<span id="thePage:theRepeat:0:theValue">ONE</span><br/>
<span id="thePage:theRepeat:1:theValue">TWO</span><br/>
<span id="thePage:theRepeat:2:theValue">THREE</span><br/>
~|~
What does this Visualforce component do?

<apex:repeat>

(#VISUALFORCE)`|`<apex:repeat>

An iteration component that allows you to output the contents of a collection according to a structure that you specify. 

The collection can include up to 1,000 items.

Note that if used within an <apex:pageBlockSection> or <apex:panelGrid> component, all content generated by a child <apex:repeat> component is placed in a single <apex:pageBlockSection> or <apex:panelGrid> cell.

This component cannot be used as a direct child of the following components:

<apex:dataTable>
<apex:pageBlockTable>
<apex:panelBar>
<apex:selectCheckboxes>
<apex:selectList>
<apex:selectRadio>
<apex:tabPanel>

<!-- Page -->

<apex:page controller="repeatCon" id="thePage">
 <apex:repeat value="{!strings}" var="string" id="theRepeat">
 <apex:outputText value="{!string}" id="theValue"/><br/>
 </apex:repeat>
</apex:page>

/*** Controller: ***/

public class repeatCon {
 public String[] getStrings() {
 return new String[]{'ONE','TWO','THREE'};
 }
}

The example above renders the following HTML:

<span id="thePage:theRepeat:0:theValue">ONE</span><br/>
<span id="thePage:theRepeat:1:theValue">TWO</span><br/>
<span id="thePage:theRepeat:2:theValue">THREE</span><br/>
~|~
This Visualforce component defines a data series to be rendered as individual (not connected) points in a linear Visualforce chart. 

(#VISUALFORCE)`|`<apex:scatterSeries>

Defines a data series to be rendered as individual (not connected) points in a linear Visualforce chart. 

At a minimum you must specify the fields in the data collection to use as X and Y values for each point, as well as the X and Y axes to scale against.

Note: This component must be enclosed within an <apex:chart> component. You can have multiple <apex:scatterSeries> components in a single chart. 

You can also add <apex:areaSeries>, <apex:barSeries>, and <apex:lineSeries> components, but the results might not be very readable.

EXAMPLE

<apex:chart height="530" width="700" animate="true" data="{!data}">
 <apex:scatterSeries xField="data1" yField="data2" 
 markerType="circle" markerSize="3"/>
 <apex:axis type="Numeric" position="bottom" fields="data1" 
 title="Torque" grid="true">
 <apex:chartLabel/>
 </apex:axis>
 <apex:axis type="Numeric" position="left" fields="data2" 
 title="Lateral Motion" grid="true">
 <apex:chartLabel/>
 </apex:axis>
</apex:chart>
~|~
What does this Visualforce component do?

<apex:scatterSeries>

(#VISUALFORCE)`|`<apex:scatterSeries>

Defines a data series to be rendered as individual (not connected) points in a linear Visualforce chart. 

At a minimum you must specify the fields in the data collection to use as X and Y values for each point, as well as the X and Y axes to scale against.

Note: This component must be enclosed within an <apex:chart> component. You can have multiple <apex:scatterSeries> components in a single chart. 

You can also add <apex:areaSeries>, <apex:barSeries>, and <apex:lineSeries> components, but the results might not be very readable.

EXAMPLE

<apex:chart height="530" width="700" animate="true" data="{!data}">
 <apex:scatterSeries xField="data1" yField="data2" 
 markerType="circle" markerSize="3"/>
 <apex:axis type="Numeric" position="bottom" fields="data1" 
 title="Torque" grid="true">
 <apex:chartLabel/>
 </apex:axis>
 <apex:axis type="Numeric" position="left" fields="data2" 
 title="Lateral Motion" grid="true">
 <apex:chartLabel/>
 </apex:axis>
</apex:chart>
~|~
This Visualforce component creates an inline frame that displays an s-control.

(#VISUALFORCE)`|`<apex:scontrol>

Creates an inline frame that displays an s-control.

Note: s-controls have been superseded by Visualforce pages. After March 2010 organizations that have never created s-controls, as well as new organizations, won't be allowed to create them. Existing s-controls remain unaffected.

EXAMPLE

<apex:page>
 <apex:scontrol controlName="HelloWorld" />
</apex:page>
~|~
What does this Visualforce component do?

<apex:scontrol>

(#VISUALFORCE)`|`<apex:scontrol>

Creates an inline frame that displays an s-control.

Note: s-controls have been superseded by Visualforce pages. After March 2010 organizations that have never created s-controls, as well as new organizations, won't be allowed to create them. Existing s-controls remain unaffected.

EXAMPLE

<apex:page>
 <apex:scontrol controlName="HelloWorld" />
</apex:page>
~|~
This Visualforce component adds a title bar for a page. In a standard Salesforce page, the title bar is a colored header displayed directly under the tab bar.

(#VISUALFORCE)`|`<apex:sectionHeader>

Adds a title bar for a page. In a standard Salesforce page, the title bar is a colored header displayed directly under the tab bar.

EXAMPLE

<apex:page standardController="Opportunity" tabStyle="Opportunity" sidebar="false">
 <apex:sectionHeader title="One of Your Opportunities" subtitle="Exciting !"/>
 <apex:detail subject="{!opportunity.ownerId}" relatedList="false" title="false"/>
</apex:page>
~|~
What does this Visualforce component do?

<apex:sectionHeader>

(#VISUALFORCE)`|`<apex:sectionHeader>

Adds a title bar for a page. In a standard Salesforce page, the title bar is a colored header displayed directly under the tab bar.

EXAMPLE

<apex:page standardController="Opportunity" tabStyle="Opportunity" sidebar="false">
 <apex:sectionHeader title="One of Your Opportunities" subtitle="Exciting !"/>
 <apex:detail subject="{!opportunity.ownerId}" relatedList="false" title="false"/>
</apex:page>
~|~
This Visualforce component creates a set of related checkbox input elements, displayed in a table.

(#VISUALFORCE)`|`<apex:selectCheckboxes>

Creates a set of related checkbox input elements, displayed in a table.

EXAMPLE

<!-- Page: -->
 
<apex:page controller="sampleCon">
 <apex:form>
 <apex:selectCheckboxes value="{!countries}">
 <apex:selectOptions value="{!items}"/>
 </apex:selectCheckboxes><br/>
 <apex:commandButton value="Test" action="{!test}" rerender="out" status="status"/>
 </apex:form>
 <apex:outputPanel id="out">
 <apex:actionstatus id="status" startText="testing...">
 <apex:facet name="stop">
 <apex:outputPanel>
 <p>You have selected:</p>
 <apex:dataList value="{!countries}" var="c">{!c}</apex:dataList>
 </apex:outputPanel>
 </apex:facet>
 </apex:actionstatus>
 </apex:outputPanel>
</apex:page>

/*** Controller: ***/
public class sampleCon {
 String[] countries = new String[]{};

 public PageReference test() {
 return null;
 }
 public List<SelectOption> getItems() {
 List<SelectOption> options = new List<SelectOption>();
 options.add(new SelectOption('US','US'));
 options.add(new SelectOption('CANADA','Canada'));
 options.add(new SelectOption('MEXICO','Mexico'));
 return options;
 }
 public String[] getCountries() {
 return countries;
 }
 public void setCountries(String[] countries) {
 this.countries = countries;
 }
}
~|~
What does this Visualforce component do?

<apex:selectCheckboxes>

(#VISUALFORCE)`|`<apex:selectCheckboxes>

Creates a set of related checkbox input elements, displayed in a table.

EXAMPLE

<!-- Page: -->
 
<apex:page controller="sampleCon">
 <apex:form>
 <apex:selectCheckboxes value="{!countries}">
 <apex:selectOptions value="{!items}"/>
 </apex:selectCheckboxes><br/>
 <apex:commandButton value="Test" action="{!test}" rerender="out" status="status"/>
 </apex:form>
 <apex:outputPanel id="out">
 <apex:actionstatus id="status" startText="testing...">
 <apex:facet name="stop">
 <apex:outputPanel>
 <p>You have selected:</p>
 <apex:dataList value="{!countries}" var="c">{!c}</apex:dataList>
 </apex:outputPanel>
 </apex:facet>
 </apex:actionstatus>
 </apex:outputPanel>
</apex:page>

/*** Controller: ***/
public class sampleCon {
 String[] countries = new String[]{};

 public PageReference test() {
 return null;
 }
 public List<SelectOption> getItems() {
 List<SelectOption> options = new List<SelectOption>();
 options.add(new SelectOption('US','US'));
 options.add(new SelectOption('CANADA','Canada'));
 options.add(new SelectOption('MEXICO','Mexico'));
 return options;
 }
 public String[] getCountries() {
 return countries;
 }
 public void setCountries(String[] countries) {
 this.countries = countries;
 }
}
~|~
This Visualforce component creates a list of options that allows users to select only one value or multiple values at a time, depending on the value of its multiselect attribute.

(#VISUALFORCE)`|`<apex:selectList>

Creates a list of options that allows users to select only one value or multiple values at a time, depending on the value of its multiselect attribute.
~|~
What does this Visualforce component do?

<apex:selectList>

(#VISUALFORCE)`|`<apex:selectList>

Creates a list of options that allows users to select only one value or multiple values at a time, depending on the value of its multiselect attribute.
~|~
This Visualforce component defines a possible value for an <apex:selectCheckboxes> or <apex:selectList> component.

(#VISUALFORCE)`|`<apex:selectOption>

Defines a possible value for an <apex:selectCheckboxes> or <apex:selectList> component. 

The <apex:selectOption> component must be a child of one of those components.
~|~
What does this Visualforce component do?

<apex:selectOption>

(#VISUALFORCE)`|`<apex:selectOption>

Defines a possible value for an <apex:selectCheckboxes> or <apex:selectList> component. 

The <apex:selectOption> component must be a child of one of those components.
~|~
This Visualforce component Defines a collection of possible values for an <apex:selectCheckBoxes>, <apex:selectRadio>, or <apex:selectList> component. 

(#VISUALFORCE)`|`<apex:selectOptions>

Defines a collection of possible values for an <apex:selectCheckBoxes>, <apex:selectRadio>, or <apex:selectList> component. 

An <apex:selectOptions> component must be a child of one of those components. 

It must also be bound to a collection of selectOption objects in a custom Visualforce controller.
~|~
What does this Visualforce component do?

<apex:selectOptions>

(#VISUALFORCE)`|`<apex:selectOptions>

Defines a collection of possible values for an <apex:selectCheckBoxes>, <apex:selectRadio>, or <apex:selectList> component. 

An <apex:selectOptions> component must be a child of one of those components. 

It must also be bound to a collection of selectOption objects in a custom Visualforce controller.
~|~
This Visualforce component creates a set of related radio button input elements, displayed in a table.

(#VISUALFORCE)`|`<apex:selectRadio>

Creates a set of related radio button input elements, displayed in a table. 

Unlike checkboxes, only one radio button can ever be selected at a time.
~|~
What does this Visualforce component do?

<apex:selectRadio>

(#VISUALFORCE)`|`<apex:selectRadio>

Creates a set of related radio button input elements, displayed in a table. 

Unlike checkboxes, only one radio button can ever be selected at a time.
~|~
This Visualforce component creates a link to a stylesheet that can be used to style components on the Visualforce page. 

When specified, this component injects the stylesheet reference into the head element of the generated HTML page.

(#VISUALFORCE)`|`<apex:stylesheet>

Creates a link to a stylesheet that can be used to style components on the Visualforce page. 

When specified, this component injects the stylesheet reference into the head element of the generated HTML page.

EXAMPLE

<apex:stylesheet value="/resources/htdocs/css/basic.css"/>

The example above renders the following HTML:

<link rel="stylesheet" type="text/css" href="/resources/htdocs/css/basic.css"/>

◊ Zip Resource Example

<apex:stylesheet value="{!URLFOR($Resource.StyleZip, 'basic.css')}"/>

The example above renders the following HTML:

<link rel="stylesheet" type="text/css" href="[generatedId]/basic.css"/>
~|~
What does this Visualforce component do?

<apex:stylesheet>

(#VISUALFORCE)`|`<apex:stylesheet>

Creates a link to a stylesheet that can be used to style components on the Visualforce page. 

When specified, this component injects the stylesheet reference into the head element of the generated HTML page.

EXAMPLE

<apex:stylesheet value="/resources/htdocs/css/basic.css"/>

The example above renders the following HTML:

<link rel="stylesheet" type="text/css" href="/resources/htdocs/css/basic.css"/>

◊ Zip Resource Example

<apex:stylesheet value="{!URLFOR($Resource.StyleZip, 'basic.css')}"/>

The example above renders the following HTML:

<link rel="stylesheet" type="text/css" href="[generatedId]/basic.css"/>
~|~
This Visualforce component creates a single tab in an <apex:tabPanel>. 

(#VISUALFORCE)`|`<apex:tab>

Creates a single tab in an <apex:tabPanel>. 

The <apex:tab> component must be a child of a <apex:tabPanel>.

EXAMPLE

<apex:page id="thePage">
 <apex:tabPanel switchType="client" selectedTab="name2" id="theTabPanel">
 <apex:tab label="One" name="name1" id="tabOne">content for tab one</apex:tab>
 <apex:tab label="Two" name="name2" id="tabTwo">content for tab two</apex:tab>
 </apex:tabPanel>
</apex:page>
~|~
What does this Visualforce component do?

<apex:tab>

(#VISUALFORCE)`|`<apex:tab>

Creates a single tab in an <apex:tabPanel>. 

The <apex:tab> component must be a child of a <apex:tabPanel>.

EXAMPLE

<apex:page id="thePage">
 <apex:tabPanel switchType="client" selectedTab="name2" id="theTabPanel">
 <apex:tab label="One" name="name1" id="tabOne">content for tab one</apex:tab>
 <apex:tab label="Two" name="name2" id="tabTwo">content for tab two</apex:tab>
 </apex:tabPanel>
</apex:page>
~|~
This Visualforce component creates a page area that displays as a set of tabs. When a user clicks a tab header, the tab's associated content displays, hiding the content of other tabs.

(#VISUALFORCE)`|`<apex:tabPanel>

Creates a page area that displays as a set of tabs. When a user clicks a tab header, the tab's associated content displays, hiding the content of other tabs.

Simple Example

<apex:page id="thePage">
 <apex:tabPanel switchType="client" selectedTab="name2" id="theTabPanel">
 <apex:tab label="One" name="name1" id="tabOne">content for tab one</apex:tab>
 <apex:tab label="Two" name="name2" id="tabTwo">content for tab two</apex:tab>
 </apex:tabPanel>
</apex:page>

Advanced Example

<!-- This example shows how to use the tabClass and inactiveTabClass attributes to
change the default styling of the tab bar. Note that in the style definitions,
'background-image:none' is required to override the default image with the
specified color. You can also provide your own image with .css styles. -->

<apex:page standardController="Account" showHeader="true">
 <!-- Define Tab panel .css styles -->
 <style>
 .activeTab {background-color: #236FBD; color:white; background-image:none}
 .inactiveTab { background-color: lightgrey; color:black; background-image:none}
 </style>

 <!-- Create Tab panel -->
 <apex:tabPanel switchType="client" selectedTab="name2" id="AccountTabPanel"
 tabClass='activeTab' inactiveTabClass='inactiveTab'>
 <apex:tab label="One" name="name1" id="tabOne">content for tab one</apex:tab>
 <apex:tab label="Two" name="name2" id="tabTwo">content for tab two</apex:tab>
 </apex:tabPanel>
</apex:page>
~|~
What does this Visualforce component do?

XXXXXX

(#VISUALFORCE)`|`<apex:tabPanel>

Creates a page area that displays as a set of tabs. When a user clicks a tab header, the tab's associated content displays, hiding the content of other tabs.

Simple Example

<apex:page id="thePage">
 <apex:tabPanel switchType="client" selectedTab="name2" id="theTabPanel">
 <apex:tab label="One" name="name1" id="tabOne">content for tab one</apex:tab>
 <apex:tab label="Two" name="name2" id="tabTwo">content for tab two</apex:tab>
 </apex:tabPanel>
</apex:page>

Advanced Example

<!-- This example shows how to use the tabClass and inactiveTabClass attributes to
change the default styling of the tab bar. Note that in the style definitions,
'background-image:none' is required to override the default image with the
specified color. You can also provide your own image with .css styles. -->

<apex:page standardController="Account" showHeader="true">
 <!-- Define Tab panel .css styles -->
 <style>
 .activeTab {background-color: #236FBD; color:white; background-image:none}
 .inactiveTab { background-color: lightgrey; color:black; background-image:none}
 </style>

 <!-- Create Tab panel -->
 <apex:tabPanel switchType="client" selectedTab="name2" id="AccountTabPanel"
 tabClass='activeTab' inactiveTabClass='inactiveTab'>
 <apex:tab label="One" name="name1" id="tabOne">content for tab one</apex:tab>
 <apex:tab label="Two" name="name2" id="tabTwo">content for tab two</apex:tab>
 </apex:tabPanel>
</apex:page>
~|~
This Visualforce component creates a stylized, horizontal toolbar that can contain any number of child components. 

(#VISUALFORCE)`|`<apex:toolbar>

Creates a stylized, horizontal toolbar that can contain any number of child components. 

By default, all child components are aligned to the left side of the toolbar. 

Use an <apex:toolbarGroup> component to align one or more child components to the right.
~|~
What does this Visualforce component do?

<apex:toolbar>

(#VISUALFORCE)`|`<apex:toolbar>

Creates a stylized, horizontal toolbar that can contain any number of child components. 

By default, all child components are aligned to the left side of the toolbar. 

Use an <apex:toolbarGroup> component to align one or more child components to the right.
~|~
This Visualforce component defines a group of components within a toolbar that can be aligned to the left or right of the toolbar. 

(#VISUALFORCE)`|`<apex:toolbarGroup>

Defines a group of components within a toolbar that can be aligned to the left or right of the toolbar. 

The <apex:toolbarGroup> component must be a child component of an <apex:toolbar>.

EXAMPLE

<apex:page id="thePage">
 <apex:toolbar id="theToolbar">
 <apex:outputText value="Sample Toolbar"/>
 <apex:toolbarGroup itemSeparator="line" id="toobarGroupLinks">
 <apex:outputLink value="http://www.salesforce.com">salesforce</apex:outputLink>
 <apex:outputLink value="http://developer.salesforce.com">apex developer network</apex:outputLink>
 </apex:toolbarGroup>
 <apex:toolbarGroup itemSeparator="line" location="right" id="toobarGroupForm">
 <apex:form id="theForm">
 <apex:inputText id="theInputText">Enter Text</apex:inputText>
 <apex:commandLink value="search" id="theCommandLink"/>
 </apex:form>
 </apex:toolbarGroup>
 </apex:toolbar>
</apex:page>
~|~
What does this Visualforce component do?

<apex:toolbarGroup>

(#VISUALFORCE)`|`<apex:toolbarGroup>

Defines a group of components within a toolbar that can be aligned to the left or right of the toolbar. 

The <apex:toolbarGroup> component must be a child component of an <apex:toolbar>.

EXAMPLE

<apex:page id="thePage">
 <apex:toolbar id="theToolbar">
 <apex:outputText value="Sample Toolbar"/>
 <apex:toolbarGroup itemSeparator="line" id="toobarGroupLinks">
 <apex:outputLink value="http://www.salesforce.com">salesforce</apex:outputLink>
 <apex:outputLink value="http://developer.salesforce.com">apex developer network</apex:outputLink>
 </apex:toolbarGroup>
 <apex:toolbarGroup itemSeparator="line" location="right" id="toobarGroupForm">
 <apex:form id="theForm">
 <apex:inputText id="theInputText">Enter Text</apex:inputText>
 <apex:commandLink value="search" id="theCommandLink"/>
 </apex:form>
 </apex:toolbarGroup>
 </apex:toolbar>
</apex:page>
~|~
This Visualforce component creates a local variable that can be used as a replacement for a specified expression within the body of the component. 

(#VISUALFORCE)`|`<apex:variable>

Creates a local variable that can be used as a replacement for a specified expression within the body of the component. 

◊ Use <apex:variable> to reduce repetitive and verbose expressions within a page.

Note:<apex:variable> does not support reassignment inside of an iteration component, such as <apex:dataTable> or <apex:repeat>. The result of doing so, eg., incrementing the <apex:variable> as a counter, is unsupported and undefined.

EXAMPLE

<!-- Page: -->
<apex:page controller="variableCon">
 <apex:variable var="c" value="{!contact}" />
 <p>Greetings, {!c.LastName}.</p>
</apex:page>

/*** Controller ***/
public class variableCon {
 Contact contact;

 public Contact getContact() {
 if (contact == null){ 
 contact = [select LastName from Contact where 
 id = :ApexPages.currentPage().getParameters().get('id')];
 }
 return contact;
 }
}
~|~
What does this Visualforce component do?

<apex:variable>

(#VISUALFORCE)`|`<apex:variable>

Creates a local variable that can be used as a replacement for a specified expression within the body of the component. 

◊ Use <apex:variable> to reduce repetitive and verbose expressions within a page.

Note:<apex:variable> does not support reassignment inside of an iteration component, such as <apex:dataTable> or <apex:repeat>. The result of doing so, eg., incrementing the <apex:variable> as a counter, is unsupported and undefined.

EXAMPLE

<!-- Page: -->
<apex:page controller="variableCon">
 <apex:variable var="c" value="{!contact}" />
 <p>Greetings, {!c.LastName}.</p>
</apex:page>

/*** Controller ***/
public class variableCon {
 Contact contact;

 public Contact getContact() {
 if (contact == null){ 
 contact = [select LastName from Contact where 
 id = :ApexPages.currentPage().getParameters().get('id')];
 }
 return contact;
 }
}
~|~
This Visualforce component displays the vote control for an object that supports it.

(#VISUALFORCE)`|`<apex:vote>

A component that displays the vote control for an object that supports it.
~|~
What does this Visualforce component do?

<apex:vote>

(#VISUALFORCE)`|`<apex:vote>

A component that displays the vote control for an object that supports it.
~|~
This Visualforce component composes an attachment and append it to an email.

(#VISUALFORCE)`|`<messaging:attachment>

Composes an attachment and append it to an email.
~|~
What does this Visualforce component do?

<messaging:attachment>

(#VISUALFORCE)`|`<messaging:attachment>

Composes an attachment and append it to an email.
~|~
This Visualforce component adds a custom header to an email. 

(#VISUALFORCE)`|`<messaging:emailHeader>

Adds a custom header to an email. 

The body of a header is limited to 1000 characters.
~|~
What does this Visualforce component do?

<messaging:emailHeader>

(#VISUALFORCE)`|`<messaging:emailHeader>

Adds a custom header to an email. 

The body of a header is limited to 1000 characters.
~|~
This Visualforce component defines a Visualforce email template.

(#VISUALFORCE)`|`<messaging:emailTemplate>

Defines a Visualforce email template. 

◊ All email template tags must be wrapped inside a single emailTemplate component tag. 

◊ emailTemplate must contain either an htmlEmailBody tag or a plainTextEmailBody tag. 

◊ The detail and form components are not permitted as child nodes. 

◊ This component can only be used within a Visualforce email template. 

◊ Email templates can be created and managed through Setup | Communication Templates | Email Templates.
~|~
What does this Visualforce component do?

<messaging:emailTemplate>

(#VISUALFORCE)`|`<messaging:emailTemplate>

Defines a Visualforce email template. 

◊ All email template tags must be wrapped inside a single emailTemplate component tag. 

◊ emailTemplate must contain either an htmlEmailBody tag or a plainTextEmailBody tag. 

◊ The detail and form components are not permitted as child nodes. 

◊ This component can only be used within a Visualforce email template. 

◊ Email templates can be created and managed through Setup | Communication Templates | Email Templates.
~|~
This Visualforce component defines the HTML version of an email body.

(#VISUALFORCE)`|`<messaging:htmlEmailBody>

Defines the HTML version of an email body.
~|~
What does this Visualforce component do?

<messaging:htmlEmailBody>

(#VISUALFORCE)`|`<messaging:htmlEmailBody>

Defines the HTML version of an email body.
~|~
This Visualforce component defines the plain text (non-HTML) version of an email body.

(#VISUALFORCE)`|`<messaging:plainTextEmailBody>

Defines the plain text (non-HTML) version of an email body.
~|~
What does this Visualforce component do?

<messaging:plainTextEmailBody>

(#VISUALFORCE)`|`<messaging:plainTextEmailBody>

Defines the plain text (non-HTML) version of an email body.
~|~
True or False?

Apex is a dynamically-typed language that is syntactically similar to Java, with properties similar to C#, and designed for use on Force.com and Heroku (using the Force Compiler for Java).

(#APEX)
(#PLATFORM)`|`False.

Apex is a STATICALLY-TYPED language that is syntactically similar to Java. and with properties similar to C#.

Apex is designed SOLELY for use on the Force.com platform.
~|~
...`|`Force.com governor limits cover...

Most database activities

The number of executed code statements

CPU time

Heap and stack usage

Callouts

Asynchronous executions

Email
~|~
...`|`Collection datatypes in Apex include....

Lists (ordered array)

Sets (unordered, unique collection)

Maps (set of key-value pairs)
~|~
...`|`A "wrapper" is simply an instance of a class that exposes some or all of the properties of a contained object.

This would be considered a "has a" relationship, as opposed to an "is a" relationship.

An "is a" relationship is what you get when you subclass from, or inherit from, a parent class.

----> An apple "is a" fruit.

A "has a" relationship is when you contain an instance of a class (an object).

----> My lunchbox "has an" apple.
~|~
...`|`SOQL is not SQL!

There are no implicit joins in SOQL. This means that you must define all object relationships up-front. 

You can't simply make an ad-hoc "dynamic" join between to objects at run time UNLESS those objects already have a relationship defined.

Objects may have parent-child relationships, but not 1-to-1 relationships.
~|~
...`|`Wrapper classes are useful because Apex is statically typed. 

Dynamically typed languages, like Python and Ruby can create polymorphic list iterators that can iterate over a list of any type of object.

However, in Apex, static typing means that you must choose exactly one type of object per list when you're doing iterations.
~|~
...`|`Why should a developer us the "private set" method of defining a class variable setter?

public String myString {get; private set;}

A: Because it makes for a clean, tidy definition for a setter method that can be used inside the class, but not by the outside world. 

This is important because sometimes you might want some sort of logic to run when a variable is set inside a class, while simultaneously NOT wanting the outside world to be able to effect your class data (an "immutable" class needs this!)
----------
It's rather simple. Private setters allow you to create read-only public or protected properties.

That's it. That's the only reason.

Yes, you can create a read-only property by only specifying the getter, but with auto-implmeneted properties you are required to specify both get and set, so if you want an auto-implemented property to be read-only, you must use private setters. There is no other way to do it.

It's true that Private setters were not created specificlly for auto-implemented read-only properties, but their use is a bit more esoteric for other reasons, largely centering around read-only properties and the use of reflection and serialization.
------------
This is shorthand for:

private String myPrivateString;

public String myString {
 get{
 return myPrivateString;
 }
 // No setter defined, so myPrivateString is not accessible from outside world.
}
~|~
...`|`Order of execution when a class is instantiated.

1. All in-place initialization blocks are executed in the order in which they appear in the code file that defines the class.

2. The constructor is executed.

3. anything else?
~|~
...`|`Syntax shorthand for setting Map variables with object records as a result of a SOQL query:

public map<ID, Account> myAccountMap = new map<ID, Account>([SELECT Id, Name FROM Account WHERE Name LIKE '%Vivek%']);

This will populate the map variable, myAccountMap, with the result of the SOQL query. Apex sees this shorthand code and will automatically populate the map using the record IDs for the key, and the matching account records as the values (Account objects, in this case).
~|~
...`|`Is this code OK?


List<Account> acc = [SELECT Name FROM Account];


A. Yes
B. No. You must initialize the variable using "new List<Account>([SELECT Name FROM Account]);
C. No. You can not initialize collections with SOQL expressions.
D. ???
F. None of these

**You can do another version of this where you add an Apex variable to the query, but leave out the : operator**
~|~
...`|`RESERVED

Create a second version of the above question, per the notes.
~|~
...`|`Apex function and method parameters are passed by value, or by reference?

Passed by value, but often times what is passed is a REFERENCE to an object! So, inner code that operates using that value will actually be touching the real object, which is what would happen in C if you were passed a pointer to an object.

There are ways to create a copy of an entire object and pass THAT, but I'm not sure why anyone would do that.
~|~
...`|`Visualforce page Order of Execution

**INCOMPLETE and INNACURATE**

** FIX ME! **

1. Page controller is instantiated, and it's no-arguments constructor is called.

2. Extensions are instantiated,and their constructors are called. Note that their constructors are supposed to take one paramter, right? Am I confusing this with SetControllers?

3. Components on the page are found, and their controllers are instantiated, and those controller constructors are executed.

4. Expressions are evaluated, eg. anything inside {! ...} tags.

5. HTML output is created and sent to the client making the request.

***Where does Viewstate enter the picture? I think between 4 and 5??***
~|~
...`|`<apex:pageBlockButtons> must exist inside of an <apex:pageBlock> block.
~|~
...`|`<apex:pageBlockTable> must exist inside of an <apex:pageBlock> block.

Same with <apex:pageBlockSection>
~|~
...`|`The standard number of columns for use in an <apex:pageBlockSection> is 1, 2, or 3.

What happens if you want 4? Is it an error, or just really ugly?
~|~
...`|`Salesforce knows the type of an object solely by seeing it's ID.

True!

The first 3 chars of any Salesforce object ID indicate what kind of object that ID belongs to.

This is why you can use shorthand like a hyperlink that goes to "/{! objectID }", and the URL when clicked will take the visitor to the correct default view page for that object.
~|~
...`|`PageReference is the preferred method of exposing methods in Apex to Visualforce (ie action method calls).

It's possible to return VOID from Apex Action Methods, but it's best practice to return PageReference instead.

You can always return NULL at the end of an Action Method, so there is no pressure to actually return a real PageReference object when all you want is for the page viewer to stay on the current page. At least this way you have the option to quickly change behavior later if you want, without having to refactor too much code.
~|~
...`|`The Database.Query() method is a way to execute dynamic SOQL.

What are some issues surrounding the use of Database.Query()? Please create 2 or 3 questions.
~|~
...`|`RESERVED for Database.Query() question.
~|~
...`|`RESERVED for Database.Query() question.
~|~
...`|`You should NEVER do DML inside of a loop.

Best practice is to use loops to make or modify collections of SObjects, and then make ONE DML statement once looping is done.

Some T/F questions along these lines could be...

SOQL for loops allow you to more efficiently do DML statements inside of loops. This is best practice!

We should have two Qs along this path.
~|~
...`|`RESERVED for another SOQL / DML looping question.
~|~
...`|`Database.Delete()

This seems like a VERY useful option when deleting records. Write a question about this.
~|~
...`|`RESERVED for another Database class method.
~|~
...`|`RESERVED for another Database class method.
~|~
...`|`Schema.getGlobalDescribe()

Write a question about this
~|~
...`|`RESERVED for another Schema Describe question
~|~
...`|`RESERVED for a third Schema Describe question.
~|~
...`|`Why, and what happens, when you create static methods and member variables in a class?

M/C Question:
Given the following code, called from a Trigger...

MyAccounts.SET_METHOD.
MyAccounts = MyCustomMethod(Trigger.New);

What is the correct signature for MyCustomMethod?

A. public static set<Account> MyCustomMethod(List<SObject> newRecs)

B. private virtual list<Account> MyCustomMethod()

C. ---> More like this
~|~
...`|`RESERVED: Similar Q as above, but for getter or setter using static variables

Wait...not sure static member vars HAVE getters and setters?
~|~
...`|`RESERVED: Q similar to above, but focus on determining the correct way to CALL a static method, or access a static member variable.
~|~
...`|`What areas of the Force.com platform ARE case-sensitive?

- Strings when used as keys in Map collections are case-sensitive.

- One of the Salesforce Object ID formats is case-sensitive (I think it's the 13 char one, not the 16 char one

(make sure you have those numbers right!)
~|~
...`|`RESERVED: Add question about object IDs, 

-the short version vs. the long one

- Where each is used

- What can you learn from the first 3 chars?
~|~
...`|`RESERVED: Another Q related to either of the two previous.
~|~
...`|`When accessing fields of an SObject type variable, you need to use very specific access syntax. For example to get the FirstName value from a contact that is currently cast as an SObject, you would...

String ContactFirstName = (String) mySObject.get('FirstName');

There is ONE exception to this.

You can extract the Id field from an SObject by using direct access.

Id ContactId = mySObject.Id

TEST THIS TO CONFIRM!
~|~
...`|`RESERVED: There is probably another question I can ask along the same subject as the prev. question.
~|~
...`|`Trigger execution.

Trigger order execution can not be predicted.

You can not define methods inside of a Trigger definition file.

What are the trigger context variables?

What are the types of triggers? eg. before update, after insert, etc.

the limit on recursive trigger fires is a stack depth of 16. Is this unique to triggers, or is that a function of the overall limit on stack size/depth?

Anything else?
~|~
...`|`RESERVED: Trigger question.
~|~
...`|`RESERVED: Trigger question.
~|~
...`|`RESERVED: Trigger question.
~|~
...`|`RESERVED: Trigger question.
~|~
...`|`The most common design pattern for preventing trigger recursion is setting a public static Boolean in the trigger handler class.
~|~
...`|`How many threads can be run within a single execution context? 

ONE.
~|~
...`|`Which command can be used to spawn a worker thread within an existing execution context?

A: System.CreateThread()
B: System.ThreadEnable()
F. None of these.
~|~
...`|`Which keyword is required in order to mark a class as safe for use in a multithread execution context?

F. None of these.
~|~
...`|`What is an Execution Context?
~|~
...`|`Static variables are only global to the specific execution context that references them.

Code running in another execution context gets their own version.
~|~
...`|`Questions about @isTest annotation

Do test classes count against limits?
~|~
...`|`What about the testmethod keyword?

Required, even inside test classes. It's what lets the platform know that THIS method is an entry point for test execution.
~|~
...`|`Unit tests are class methods that verify whether a particular piece of code is working properly. 

Unit test methods take no arguments, commit no data to the database, and are flagged with the testMethod keyword in the method definition.

All test methods in an organization are executed whenever Apex code is deployed to a production organization to confirm correctness, ensure code coverage, and prevent regressions. 

All Apex classes are required to have at least 75% code coverage in order to be deployed to a production organization. 

In addition, all triggers must have some code coverage.
~|~
...`|`RESERVED for test method Q
~|~
...`|`RESERVED for test method Q
~|~
...`|`Write questions about...

System.Assert

System.AssertEquals

System.AssertNotEqual

Maybe one more? Really need to cover System.Assertion methods. Maybe a question that asks why asserts are needed?
~|~
...`|`RESERVED for System.Assert Q
~|~
...`|`RESERVED for System.Assert Q
~|~
...`|`RESERVED for System.Assert Q
~|~
...`|`Object oriented design patterns.

Program to an interface, not an implementation.

Strive for loosely-coupled designs

Encapsulate what varies.

Favor composition over inheritance.

remember the "open-closed" principle: Design code that is open to EXTENSION, but closed to MODIFICATION.

An elegant design in Apex embodies the best of design principles that have evolved over the years while EMBRACING the new realities of living within the limits of a multi-tenant platform.

Create an Abstract or Virtual class when you have common functionality that you want to share with sub classes.
~|~
...`|`RESERVED OOD design patterns

Interfaces

Abstract Classes

Virtual Classes
~|~
...`|`RESERVED OOD design patterns

Interfaces

Abstract Classes

Virtual Classes
~|~
...`|`RESERVED OOD design patterns

Interfaces

Abstract Classes

Virtual Classes
~|~
...`|`RESERVED OOD design patterns

Interfaces

Abstract Classes

Virtual Classes
~|~